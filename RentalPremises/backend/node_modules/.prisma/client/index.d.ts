
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model TypePremises
 * 
 */
export type TypePremises = $Result.DefaultSelection<Prisma.$TypePremisesPayload>
/**
 * Model Premise
 * 
 */
export type Premise = $Result.DefaultSelection<Prisma.$PremisePayload>
/**
 * Model Rental
 * 
 */
export type Rental = $Result.DefaultSelection<Prisma.$RentalPayload>
/**
 * Model Characteristic
 * 
 */
export type Characteristic = $Result.DefaultSelection<Prisma.$CharacteristicPayload>
/**
 * Model DescriptionCharacteristic
 * 
 */
export type DescriptionCharacteristic = $Result.DefaultSelection<Prisma.$DescriptionCharacteristicPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.typePremises`: Exposes CRUD operations for the **TypePremises** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypePremises
    * const typePremises = await prisma.typePremises.findMany()
    * ```
    */
  get typePremises(): Prisma.TypePremisesDelegate<ExtArgs>;

  /**
   * `prisma.premise`: Exposes CRUD operations for the **Premise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Premises
    * const premises = await prisma.premise.findMany()
    * ```
    */
  get premise(): Prisma.PremiseDelegate<ExtArgs>;

  /**
   * `prisma.rental`: Exposes CRUD operations for the **Rental** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rentals
    * const rentals = await prisma.rental.findMany()
    * ```
    */
  get rental(): Prisma.RentalDelegate<ExtArgs>;

  /**
   * `prisma.characteristic`: Exposes CRUD operations for the **Characteristic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characteristics
    * const characteristics = await prisma.characteristic.findMany()
    * ```
    */
  get characteristic(): Prisma.CharacteristicDelegate<ExtArgs>;

  /**
   * `prisma.descriptionCharacteristic`: Exposes CRUD operations for the **DescriptionCharacteristic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DescriptionCharacteristics
    * const descriptionCharacteristics = await prisma.descriptionCharacteristic.findMany()
    * ```
    */
  get descriptionCharacteristic(): Prisma.DescriptionCharacteristicDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    TypePremises: 'TypePremises',
    Premise: 'Premise',
    Rental: 'Rental',
    Characteristic: 'Characteristic',
    DescriptionCharacteristic: 'DescriptionCharacteristic'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'typePremises' | 'premise' | 'rental' | 'characteristic' | 'descriptionCharacteristic'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      TypePremises: {
        payload: Prisma.$TypePremisesPayload<ExtArgs>
        fields: Prisma.TypePremisesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypePremisesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypePremisesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          findFirst: {
            args: Prisma.TypePremisesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypePremisesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          findMany: {
            args: Prisma.TypePremisesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>[]
          }
          create: {
            args: Prisma.TypePremisesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          createMany: {
            args: Prisma.TypePremisesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TypePremisesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          update: {
            args: Prisma.TypePremisesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          deleteMany: {
            args: Prisma.TypePremisesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TypePremisesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TypePremisesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePremisesPayload>
          }
          aggregate: {
            args: Prisma.TypePremisesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTypePremises>
          }
          groupBy: {
            args: Prisma.TypePremisesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypePremisesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypePremisesCountArgs<ExtArgs>,
            result: $Utils.Optional<TypePremisesCountAggregateOutputType> | number
          }
        }
      }
      Premise: {
        payload: Prisma.$PremisePayload<ExtArgs>
        fields: Prisma.PremiseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PremiseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PremiseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          findFirst: {
            args: Prisma.PremiseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PremiseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          findMany: {
            args: Prisma.PremiseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>[]
          }
          create: {
            args: Prisma.PremiseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          createMany: {
            args: Prisma.PremiseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PremiseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          update: {
            args: Prisma.PremiseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          deleteMany: {
            args: Prisma.PremiseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PremiseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PremiseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PremisePayload>
          }
          aggregate: {
            args: Prisma.PremiseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePremise>
          }
          groupBy: {
            args: Prisma.PremiseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PremiseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PremiseCountArgs<ExtArgs>,
            result: $Utils.Optional<PremiseCountAggregateOutputType> | number
          }
        }
      }
      Rental: {
        payload: Prisma.$RentalPayload<ExtArgs>
        fields: Prisma.RentalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RentalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RentalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          findFirst: {
            args: Prisma.RentalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RentalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          findMany: {
            args: Prisma.RentalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>[]
          }
          create: {
            args: Prisma.RentalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          createMany: {
            args: Prisma.RentalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RentalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          update: {
            args: Prisma.RentalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          deleteMany: {
            args: Prisma.RentalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RentalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RentalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RentalPayload>
          }
          aggregate: {
            args: Prisma.RentalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRental>
          }
          groupBy: {
            args: Prisma.RentalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RentalGroupByOutputType>[]
          }
          count: {
            args: Prisma.RentalCountArgs<ExtArgs>,
            result: $Utils.Optional<RentalCountAggregateOutputType> | number
          }
        }
      }
      Characteristic: {
        payload: Prisma.$CharacteristicPayload<ExtArgs>
        fields: Prisma.CharacteristicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacteristicFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacteristicFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          findFirst: {
            args: Prisma.CharacteristicFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacteristicFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          findMany: {
            args: Prisma.CharacteristicFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>[]
          }
          create: {
            args: Prisma.CharacteristicCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          createMany: {
            args: Prisma.CharacteristicCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CharacteristicDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          update: {
            args: Prisma.CharacteristicUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          deleteMany: {
            args: Prisma.CharacteristicDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CharacteristicUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CharacteristicUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacteristicPayload>
          }
          aggregate: {
            args: Prisma.CharacteristicAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacteristic>
          }
          groupBy: {
            args: Prisma.CharacteristicGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CharacteristicGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacteristicCountArgs<ExtArgs>,
            result: $Utils.Optional<CharacteristicCountAggregateOutputType> | number
          }
        }
      }
      DescriptionCharacteristic: {
        payload: Prisma.$DescriptionCharacteristicPayload<ExtArgs>
        fields: Prisma.DescriptionCharacteristicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DescriptionCharacteristicFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DescriptionCharacteristicFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          findFirst: {
            args: Prisma.DescriptionCharacteristicFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DescriptionCharacteristicFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          findMany: {
            args: Prisma.DescriptionCharacteristicFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>[]
          }
          create: {
            args: Prisma.DescriptionCharacteristicCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          createMany: {
            args: Prisma.DescriptionCharacteristicCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DescriptionCharacteristicDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          update: {
            args: Prisma.DescriptionCharacteristicUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          deleteMany: {
            args: Prisma.DescriptionCharacteristicDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DescriptionCharacteristicUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DescriptionCharacteristicUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DescriptionCharacteristicPayload>
          }
          aggregate: {
            args: Prisma.DescriptionCharacteristicAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDescriptionCharacteristic>
          }
          groupBy: {
            args: Prisma.DescriptionCharacteristicGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DescriptionCharacteristicGroupByOutputType>[]
          }
          count: {
            args: Prisma.DescriptionCharacteristicCountArgs<ExtArgs>,
            result: $Utils.Optional<DescriptionCharacteristicCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    PremiseRef: number
    RentalRef: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PremiseRef?: boolean | UserCountOutputTypeCountPremiseRefArgs
    RentalRef?: boolean | UserCountOutputTypeCountRentalRefArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPremiseRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRentalRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }


  /**
   * Count Type TypePremisesCountOutputType
   */

  export type TypePremisesCountOutputType = {
    PremiseRef: number
    Characteristic: number
  }

  export type TypePremisesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PremiseRef?: boolean | TypePremisesCountOutputTypeCountPremiseRefArgs
    Characteristic?: boolean | TypePremisesCountOutputTypeCountCharacteristicArgs
  }

  // Custom InputTypes
  /**
   * TypePremisesCountOutputType without action
   */
  export type TypePremisesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremisesCountOutputType
     */
    select?: TypePremisesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TypePremisesCountOutputType without action
   */
  export type TypePremisesCountOutputTypeCountPremiseRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiseWhereInput
  }

  /**
   * TypePremisesCountOutputType without action
   */
  export type TypePremisesCountOutputTypeCountCharacteristicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacteristicWhereInput
  }


  /**
   * Count Type PremiseCountOutputType
   */

  export type PremiseCountOutputType = {
    RentalRef: number
    DescriptionCharacteristicRef: number
  }

  export type PremiseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RentalRef?: boolean | PremiseCountOutputTypeCountRentalRefArgs
    DescriptionCharacteristicRef?: boolean | PremiseCountOutputTypeCountDescriptionCharacteristicRefArgs
  }

  // Custom InputTypes
  /**
   * PremiseCountOutputType without action
   */
  export type PremiseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiseCountOutputType
     */
    select?: PremiseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PremiseCountOutputType without action
   */
  export type PremiseCountOutputTypeCountRentalRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
  }

  /**
   * PremiseCountOutputType without action
   */
  export type PremiseCountOutputTypeCountDescriptionCharacteristicRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DescriptionCharacteristicWhereInput
  }


  /**
   * Count Type CharacteristicCountOutputType
   */

  export type CharacteristicCountOutputType = {
    TypePremises: number
    DescriptionCharacteristicRef: number
  }

  export type CharacteristicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TypePremises?: boolean | CharacteristicCountOutputTypeCountTypePremisesArgs
    DescriptionCharacteristicRef?: boolean | CharacteristicCountOutputTypeCountDescriptionCharacteristicRefArgs
  }

  // Custom InputTypes
  /**
   * CharacteristicCountOutputType without action
   */
  export type CharacteristicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacteristicCountOutputType
     */
    select?: CharacteristicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CharacteristicCountOutputType without action
   */
  export type CharacteristicCountOutputTypeCountTypePremisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypePremisesWhereInput
  }

  /**
   * CharacteristicCountOutputType without action
   */
  export type CharacteristicCountOutputTypeCountDescriptionCharacteristicRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DescriptionCharacteristicWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    ID: number | null
    Role: number | null
  }

  export type UserSumAggregateOutputType = {
    ID: number | null
    Role: number | null
  }

  export type UserMinAggregateOutputType = {
    ID: number | null
    Login: string | null
    Password: string | null
    Role: number | null
    Name: string | null
    Surname: string | null
    PhoneNumber: string | null
    Photo: Buffer | null
  }

  export type UserMaxAggregateOutputType = {
    ID: number | null
    Login: string | null
    Password: string | null
    Role: number | null
    Name: string | null
    Surname: string | null
    PhoneNumber: string | null
    Photo: Buffer | null
  }

  export type UserCountAggregateOutputType = {
    ID: number
    Login: number
    Password: number
    Role: number
    Name: number
    Surname: number
    PhoneNumber: number
    Photo: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    ID?: true
    Role?: true
  }

  export type UserSumAggregateInputType = {
    ID?: true
    Role?: true
  }

  export type UserMinAggregateInputType = {
    ID?: true
    Login?: true
    Password?: true
    Role?: true
    Name?: true
    Surname?: true
    PhoneNumber?: true
    Photo?: true
  }

  export type UserMaxAggregateInputType = {
    ID?: true
    Login?: true
    Password?: true
    Role?: true
    Name?: true
    Surname?: true
    PhoneNumber?: true
    Photo?: true
  }

  export type UserCountAggregateInputType = {
    ID?: true
    Login?: true
    Password?: true
    Role?: true
    Name?: true
    Surname?: true
    PhoneNumber?: true
    Photo?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    ID: number
    Login: string
    Password: string
    Role: number
    Name: string | null
    Surname: string | null
    PhoneNumber: string | null
    Photo: Buffer | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Login?: boolean
    Password?: boolean
    Role?: boolean
    Name?: boolean
    Surname?: boolean
    PhoneNumber?: boolean
    Photo?: boolean
    PremiseRef?: boolean | User$PremiseRefArgs<ExtArgs>
    RentalRef?: boolean | User$RentalRefArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    ID?: boolean
    Login?: boolean
    Password?: boolean
    Role?: boolean
    Name?: boolean
    Surname?: boolean
    PhoneNumber?: boolean
    Photo?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PremiseRef?: boolean | User$PremiseRefArgs<ExtArgs>
    RentalRef?: boolean | User$RentalRefArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      PremiseRef: Prisma.$PremisePayload<ExtArgs>[]
      RentalRef: Prisma.$RentalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Login: string
      Password: string
      Role: number
      Name: string | null
      Surname: string | null
      PhoneNumber: string | null
      Photo: Buffer | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const userWithIDOnly = await prisma.user.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PremiseRef<T extends User$PremiseRefArgs<ExtArgs> = {}>(args?: Subset<T, User$PremiseRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findMany'> | Null>;

    RentalRef<T extends User$RentalRefArgs<ExtArgs> = {}>(args?: Subset<T, User$RentalRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly ID: FieldRef<"User", 'Int'>
    readonly Login: FieldRef<"User", 'String'>
    readonly Password: FieldRef<"User", 'String'>
    readonly Role: FieldRef<"User", 'Int'>
    readonly Name: FieldRef<"User", 'String'>
    readonly Surname: FieldRef<"User", 'String'>
    readonly PhoneNumber: FieldRef<"User", 'String'>
    readonly Photo: FieldRef<"User", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.PremiseRef
   */
  export type User$PremiseRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    where?: PremiseWhereInput
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    cursor?: PremiseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiseScalarFieldEnum | PremiseScalarFieldEnum[]
  }

  /**
   * User.RentalRef
   */
  export type User$RentalRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model TypePremises
   */

  export type AggregateTypePremises = {
    _count: TypePremisesCountAggregateOutputType | null
    _avg: TypePremisesAvgAggregateOutputType | null
    _sum: TypePremisesSumAggregateOutputType | null
    _min: TypePremisesMinAggregateOutputType | null
    _max: TypePremisesMaxAggregateOutputType | null
  }

  export type TypePremisesAvgAggregateOutputType = {
    ID: number | null
  }

  export type TypePremisesSumAggregateOutputType = {
    ID: number | null
  }

  export type TypePremisesMinAggregateOutputType = {
    ID: number | null
    Name: string | null
  }

  export type TypePremisesMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
  }

  export type TypePremisesCountAggregateOutputType = {
    ID: number
    Name: number
    _all: number
  }


  export type TypePremisesAvgAggregateInputType = {
    ID?: true
  }

  export type TypePremisesSumAggregateInputType = {
    ID?: true
  }

  export type TypePremisesMinAggregateInputType = {
    ID?: true
    Name?: true
  }

  export type TypePremisesMaxAggregateInputType = {
    ID?: true
    Name?: true
  }

  export type TypePremisesCountAggregateInputType = {
    ID?: true
    Name?: true
    _all?: true
  }

  export type TypePremisesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypePremises to aggregate.
     */
    where?: TypePremisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypePremises to fetch.
     */
    orderBy?: TypePremisesOrderByWithRelationInput | TypePremisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypePremisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypePremises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypePremises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypePremises
    **/
    _count?: true | TypePremisesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypePremisesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypePremisesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypePremisesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypePremisesMaxAggregateInputType
  }

  export type GetTypePremisesAggregateType<T extends TypePremisesAggregateArgs> = {
        [P in keyof T & keyof AggregateTypePremises]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypePremises[P]>
      : GetScalarType<T[P], AggregateTypePremises[P]>
  }




  export type TypePremisesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypePremisesWhereInput
    orderBy?: TypePremisesOrderByWithAggregationInput | TypePremisesOrderByWithAggregationInput[]
    by: TypePremisesScalarFieldEnum[] | TypePremisesScalarFieldEnum
    having?: TypePremisesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypePremisesCountAggregateInputType | true
    _avg?: TypePremisesAvgAggregateInputType
    _sum?: TypePremisesSumAggregateInputType
    _min?: TypePremisesMinAggregateInputType
    _max?: TypePremisesMaxAggregateInputType
  }

  export type TypePremisesGroupByOutputType = {
    ID: number
    Name: string
    _count: TypePremisesCountAggregateOutputType | null
    _avg: TypePremisesAvgAggregateOutputType | null
    _sum: TypePremisesSumAggregateOutputType | null
    _min: TypePremisesMinAggregateOutputType | null
    _max: TypePremisesMaxAggregateOutputType | null
  }

  type GetTypePremisesGroupByPayload<T extends TypePremisesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypePremisesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypePremisesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypePremisesGroupByOutputType[P]>
            : GetScalarType<T[P], TypePremisesGroupByOutputType[P]>
        }
      >
    >


  export type TypePremisesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    PremiseRef?: boolean | TypePremises$PremiseRefArgs<ExtArgs>
    Characteristic?: boolean | TypePremises$CharacteristicArgs<ExtArgs>
    _count?: boolean | TypePremisesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["typePremises"]>

  export type TypePremisesSelectScalar = {
    ID?: boolean
    Name?: boolean
  }


  export type TypePremisesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PremiseRef?: boolean | TypePremises$PremiseRefArgs<ExtArgs>
    Characteristic?: boolean | TypePremises$CharacteristicArgs<ExtArgs>
    _count?: boolean | TypePremisesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TypePremisesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TypePremises"
    objects: {
      PremiseRef: Prisma.$PremisePayload<ExtArgs>[]
      Characteristic: Prisma.$CharacteristicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Name: string
    }, ExtArgs["result"]["typePremises"]>
    composites: {}
  }


  type TypePremisesGetPayload<S extends boolean | null | undefined | TypePremisesDefaultArgs> = $Result.GetResult<Prisma.$TypePremisesPayload, S>

  type TypePremisesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypePremisesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypePremisesCountAggregateInputType | true
    }

  export interface TypePremisesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TypePremises'], meta: { name: 'TypePremises' } }
    /**
     * Find zero or one TypePremises that matches the filter.
     * @param {TypePremisesFindUniqueArgs} args - Arguments to find a TypePremises
     * @example
     * // Get one TypePremises
     * const typePremises = await prisma.typePremises.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypePremisesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesFindUniqueArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TypePremises that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypePremisesFindUniqueOrThrowArgs} args - Arguments to find a TypePremises
     * @example
     * // Get one TypePremises
     * const typePremises = await prisma.typePremises.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypePremisesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TypePremises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesFindFirstArgs} args - Arguments to find a TypePremises
     * @example
     * // Get one TypePremises
     * const typePremises = await prisma.typePremises.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypePremisesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesFindFirstArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TypePremises that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesFindFirstOrThrowArgs} args - Arguments to find a TypePremises
     * @example
     * // Get one TypePremises
     * const typePremises = await prisma.typePremises.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypePremisesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TypePremises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypePremises
     * const typePremises = await prisma.typePremises.findMany()
     * 
     * // Get first 10 TypePremises
     * const typePremises = await prisma.typePremises.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const typePremisesWithIDOnly = await prisma.typePremises.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends TypePremisesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TypePremises.
     * @param {TypePremisesCreateArgs} args - Arguments to create a TypePremises.
     * @example
     * // Create one TypePremises
     * const TypePremises = await prisma.typePremises.create({
     *   data: {
     *     // ... data to create a TypePremises
     *   }
     * })
     * 
    **/
    create<T extends TypePremisesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesCreateArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TypePremises.
     *     @param {TypePremisesCreateManyArgs} args - Arguments to create many TypePremises.
     *     @example
     *     // Create many TypePremises
     *     const typePremises = await prisma.typePremises.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypePremisesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TypePremises.
     * @param {TypePremisesDeleteArgs} args - Arguments to delete one TypePremises.
     * @example
     * // Delete one TypePremises
     * const TypePremises = await prisma.typePremises.delete({
     *   where: {
     *     // ... filter to delete one TypePremises
     *   }
     * })
     * 
    **/
    delete<T extends TypePremisesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesDeleteArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TypePremises.
     * @param {TypePremisesUpdateArgs} args - Arguments to update one TypePremises.
     * @example
     * // Update one TypePremises
     * const typePremises = await prisma.typePremises.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypePremisesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesUpdateArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TypePremises.
     * @param {TypePremisesDeleteManyArgs} args - Arguments to filter TypePremises to delete.
     * @example
     * // Delete a few TypePremises
     * const { count } = await prisma.typePremises.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypePremisesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypePremisesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypePremises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypePremises
     * const typePremises = await prisma.typePremises.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypePremisesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypePremises.
     * @param {TypePremisesUpsertArgs} args - Arguments to update or create a TypePremises.
     * @example
     * // Update or create a TypePremises
     * const typePremises = await prisma.typePremises.upsert({
     *   create: {
     *     // ... data to create a TypePremises
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypePremises we want to update
     *   }
     * })
    **/
    upsert<T extends TypePremisesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TypePremisesUpsertArgs<ExtArgs>>
    ): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TypePremises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesCountArgs} args - Arguments to filter TypePremises to count.
     * @example
     * // Count the number of TypePremises
     * const count = await prisma.typePremises.count({
     *   where: {
     *     // ... the filter for the TypePremises we want to count
     *   }
     * })
    **/
    count<T extends TypePremisesCountArgs>(
      args?: Subset<T, TypePremisesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypePremisesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypePremises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypePremisesAggregateArgs>(args: Subset<T, TypePremisesAggregateArgs>): Prisma.PrismaPromise<GetTypePremisesAggregateType<T>>

    /**
     * Group by TypePremises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypePremisesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypePremisesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypePremisesGroupByArgs['orderBy'] }
        : { orderBy?: TypePremisesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypePremisesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypePremisesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TypePremises model
   */
  readonly fields: TypePremisesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TypePremises.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypePremisesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PremiseRef<T extends TypePremises$PremiseRefArgs<ExtArgs> = {}>(args?: Subset<T, TypePremises$PremiseRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findMany'> | Null>;

    Characteristic<T extends TypePremises$CharacteristicArgs<ExtArgs> = {}>(args?: Subset<T, TypePremises$CharacteristicArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TypePremises model
   */ 
  interface TypePremisesFieldRefs {
    readonly ID: FieldRef<"TypePremises", 'Int'>
    readonly Name: FieldRef<"TypePremises", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TypePremises findUnique
   */
  export type TypePremisesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter, which TypePremises to fetch.
     */
    where: TypePremisesWhereUniqueInput
  }

  /**
   * TypePremises findUniqueOrThrow
   */
  export type TypePremisesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter, which TypePremises to fetch.
     */
    where: TypePremisesWhereUniqueInput
  }

  /**
   * TypePremises findFirst
   */
  export type TypePremisesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter, which TypePremises to fetch.
     */
    where?: TypePremisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypePremises to fetch.
     */
    orderBy?: TypePremisesOrderByWithRelationInput | TypePremisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypePremises.
     */
    cursor?: TypePremisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypePremises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypePremises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypePremises.
     */
    distinct?: TypePremisesScalarFieldEnum | TypePremisesScalarFieldEnum[]
  }

  /**
   * TypePremises findFirstOrThrow
   */
  export type TypePremisesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter, which TypePremises to fetch.
     */
    where?: TypePremisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypePremises to fetch.
     */
    orderBy?: TypePremisesOrderByWithRelationInput | TypePremisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypePremises.
     */
    cursor?: TypePremisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypePremises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypePremises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypePremises.
     */
    distinct?: TypePremisesScalarFieldEnum | TypePremisesScalarFieldEnum[]
  }

  /**
   * TypePremises findMany
   */
  export type TypePremisesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter, which TypePremises to fetch.
     */
    where?: TypePremisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypePremises to fetch.
     */
    orderBy?: TypePremisesOrderByWithRelationInput | TypePremisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypePremises.
     */
    cursor?: TypePremisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypePremises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypePremises.
     */
    skip?: number
    distinct?: TypePremisesScalarFieldEnum | TypePremisesScalarFieldEnum[]
  }

  /**
   * TypePremises create
   */
  export type TypePremisesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * The data needed to create a TypePremises.
     */
    data: XOR<TypePremisesCreateInput, TypePremisesUncheckedCreateInput>
  }

  /**
   * TypePremises createMany
   */
  export type TypePremisesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TypePremises.
     */
    data: TypePremisesCreateManyInput | TypePremisesCreateManyInput[]
  }

  /**
   * TypePremises update
   */
  export type TypePremisesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * The data needed to update a TypePremises.
     */
    data: XOR<TypePremisesUpdateInput, TypePremisesUncheckedUpdateInput>
    /**
     * Choose, which TypePremises to update.
     */
    where: TypePremisesWhereUniqueInput
  }

  /**
   * TypePremises updateMany
   */
  export type TypePremisesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TypePremises.
     */
    data: XOR<TypePremisesUpdateManyMutationInput, TypePremisesUncheckedUpdateManyInput>
    /**
     * Filter which TypePremises to update
     */
    where?: TypePremisesWhereInput
  }

  /**
   * TypePremises upsert
   */
  export type TypePremisesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * The filter to search for the TypePremises to update in case it exists.
     */
    where: TypePremisesWhereUniqueInput
    /**
     * In case the TypePremises found by the `where` argument doesn't exist, create a new TypePremises with this data.
     */
    create: XOR<TypePremisesCreateInput, TypePremisesUncheckedCreateInput>
    /**
     * In case the TypePremises was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypePremisesUpdateInput, TypePremisesUncheckedUpdateInput>
  }

  /**
   * TypePremises delete
   */
  export type TypePremisesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    /**
     * Filter which TypePremises to delete.
     */
    where: TypePremisesWhereUniqueInput
  }

  /**
   * TypePremises deleteMany
   */
  export type TypePremisesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypePremises to delete
     */
    where?: TypePremisesWhereInput
  }

  /**
   * TypePremises.PremiseRef
   */
  export type TypePremises$PremiseRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    where?: PremiseWhereInput
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    cursor?: PremiseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiseScalarFieldEnum | PremiseScalarFieldEnum[]
  }

  /**
   * TypePremises.Characteristic
   */
  export type TypePremises$CharacteristicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    where?: CharacteristicWhereInput
    orderBy?: CharacteristicOrderByWithRelationInput | CharacteristicOrderByWithRelationInput[]
    cursor?: CharacteristicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CharacteristicScalarFieldEnum | CharacteristicScalarFieldEnum[]
  }

  /**
   * TypePremises without action
   */
  export type TypePremisesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
  }


  /**
   * Model Premise
   */

  export type AggregatePremise = {
    _count: PremiseCountAggregateOutputType | null
    _avg: PremiseAvgAggregateOutputType | null
    _sum: PremiseSumAggregateOutputType | null
    _min: PremiseMinAggregateOutputType | null
    _max: PremiseMaxAggregateOutputType | null
  }

  export type PremiseAvgAggregateOutputType = {
    ID: number | null
    ID_type: number | null
    ID_owner: number | null
    Price: number | null
  }

  export type PremiseSumAggregateOutputType = {
    ID: number | null
    ID_type: number | null
    ID_owner: number | null
    Price: number | null
  }

  export type PremiseMinAggregateOutputType = {
    ID: number | null
    ID_type: number | null
    ID_owner: number | null
    Name: string | null
    Image: Buffer | null
    Price: number | null
    Address: string | null
  }

  export type PremiseMaxAggregateOutputType = {
    ID: number | null
    ID_type: number | null
    ID_owner: number | null
    Name: string | null
    Image: Buffer | null
    Price: number | null
    Address: string | null
  }

  export type PremiseCountAggregateOutputType = {
    ID: number
    ID_type: number
    ID_owner: number
    Name: number
    Image: number
    Price: number
    Address: number
    _all: number
  }


  export type PremiseAvgAggregateInputType = {
    ID?: true
    ID_type?: true
    ID_owner?: true
    Price?: true
  }

  export type PremiseSumAggregateInputType = {
    ID?: true
    ID_type?: true
    ID_owner?: true
    Price?: true
  }

  export type PremiseMinAggregateInputType = {
    ID?: true
    ID_type?: true
    ID_owner?: true
    Name?: true
    Image?: true
    Price?: true
    Address?: true
  }

  export type PremiseMaxAggregateInputType = {
    ID?: true
    ID_type?: true
    ID_owner?: true
    Name?: true
    Image?: true
    Price?: true
    Address?: true
  }

  export type PremiseCountAggregateInputType = {
    ID?: true
    ID_type?: true
    ID_owner?: true
    Name?: true
    Image?: true
    Price?: true
    Address?: true
    _all?: true
  }

  export type PremiseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Premise to aggregate.
     */
    where?: PremiseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Premises to fetch.
     */
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PremiseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Premises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Premises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Premises
    **/
    _count?: true | PremiseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PremiseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PremiseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiseMaxAggregateInputType
  }

  export type GetPremiseAggregateType<T extends PremiseAggregateArgs> = {
        [P in keyof T & keyof AggregatePremise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremise[P]>
      : GetScalarType<T[P], AggregatePremise[P]>
  }




  export type PremiseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiseWhereInput
    orderBy?: PremiseOrderByWithAggregationInput | PremiseOrderByWithAggregationInput[]
    by: PremiseScalarFieldEnum[] | PremiseScalarFieldEnum
    having?: PremiseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiseCountAggregateInputType | true
    _avg?: PremiseAvgAggregateInputType
    _sum?: PremiseSumAggregateInputType
    _min?: PremiseMinAggregateInputType
    _max?: PremiseMaxAggregateInputType
  }

  export type PremiseGroupByOutputType = {
    ID: number
    ID_type: number
    ID_owner: number
    Name: string
    Image: Buffer | null
    Price: number
    Address: string
    _count: PremiseCountAggregateOutputType | null
    _avg: PremiseAvgAggregateOutputType | null
    _sum: PremiseSumAggregateOutputType | null
    _min: PremiseMinAggregateOutputType | null
    _max: PremiseMaxAggregateOutputType | null
  }

  type GetPremiseGroupByPayload<T extends PremiseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PremiseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiseGroupByOutputType[P]>
            : GetScalarType<T[P], PremiseGroupByOutputType[P]>
        }
      >
    >


  export type PremiseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    ID_type?: boolean
    ID_owner?: boolean
    Name?: boolean
    Image?: boolean
    Price?: boolean
    Address?: boolean
    RentalRef?: boolean | Premise$RentalRefArgs<ExtArgs>
    TypePremises?: boolean | TypePremisesDefaultArgs<ExtArgs>
    Owner?: boolean | UserDefaultArgs<ExtArgs>
    DescriptionCharacteristicRef?: boolean | Premise$DescriptionCharacteristicRefArgs<ExtArgs>
    _count?: boolean | PremiseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premise"]>

  export type PremiseSelectScalar = {
    ID?: boolean
    ID_type?: boolean
    ID_owner?: boolean
    Name?: boolean
    Image?: boolean
    Price?: boolean
    Address?: boolean
  }


  export type PremiseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RentalRef?: boolean | Premise$RentalRefArgs<ExtArgs>
    TypePremises?: boolean | TypePremisesDefaultArgs<ExtArgs>
    Owner?: boolean | UserDefaultArgs<ExtArgs>
    DescriptionCharacteristicRef?: boolean | Premise$DescriptionCharacteristicRefArgs<ExtArgs>
    _count?: boolean | PremiseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PremisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Premise"
    objects: {
      RentalRef: Prisma.$RentalPayload<ExtArgs>[]
      TypePremises: Prisma.$TypePremisesPayload<ExtArgs>
      Owner: Prisma.$UserPayload<ExtArgs>
      DescriptionCharacteristicRef: Prisma.$DescriptionCharacteristicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      ID_type: number
      ID_owner: number
      Name: string
      Image: Buffer | null
      Price: number
      Address: string
    }, ExtArgs["result"]["premise"]>
    composites: {}
  }


  type PremiseGetPayload<S extends boolean | null | undefined | PremiseDefaultArgs> = $Result.GetResult<Prisma.$PremisePayload, S>

  type PremiseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PremiseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PremiseCountAggregateInputType | true
    }

  export interface PremiseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Premise'], meta: { name: 'Premise' } }
    /**
     * Find zero or one Premise that matches the filter.
     * @param {PremiseFindUniqueArgs} args - Arguments to find a Premise
     * @example
     * // Get one Premise
     * const premise = await prisma.premise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PremiseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseFindUniqueArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Premise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PremiseFindUniqueOrThrowArgs} args - Arguments to find a Premise
     * @example
     * // Get one Premise
     * const premise = await prisma.premise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PremiseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Premise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseFindFirstArgs} args - Arguments to find a Premise
     * @example
     * // Get one Premise
     * const premise = await prisma.premise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PremiseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseFindFirstArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Premise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseFindFirstOrThrowArgs} args - Arguments to find a Premise
     * @example
     * // Get one Premise
     * const premise = await prisma.premise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PremiseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Premises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Premises
     * const premises = await prisma.premise.findMany()
     * 
     * // Get first 10 Premises
     * const premises = await prisma.premise.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const premiseWithIDOnly = await prisma.premise.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends PremiseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Premise.
     * @param {PremiseCreateArgs} args - Arguments to create a Premise.
     * @example
     * // Create one Premise
     * const Premise = await prisma.premise.create({
     *   data: {
     *     // ... data to create a Premise
     *   }
     * })
     * 
    **/
    create<T extends PremiseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseCreateArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Premises.
     *     @param {PremiseCreateManyArgs} args - Arguments to create many Premises.
     *     @example
     *     // Create many Premises
     *     const premise = await prisma.premise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PremiseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Premise.
     * @param {PremiseDeleteArgs} args - Arguments to delete one Premise.
     * @example
     * // Delete one Premise
     * const Premise = await prisma.premise.delete({
     *   where: {
     *     // ... filter to delete one Premise
     *   }
     * })
     * 
    **/
    delete<T extends PremiseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseDeleteArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Premise.
     * @param {PremiseUpdateArgs} args - Arguments to update one Premise.
     * @example
     * // Update one Premise
     * const premise = await prisma.premise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PremiseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseUpdateArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Premises.
     * @param {PremiseDeleteManyArgs} args - Arguments to filter Premises to delete.
     * @example
     * // Delete a few Premises
     * const { count } = await prisma.premise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PremiseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PremiseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Premises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Premises
     * const premise = await prisma.premise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PremiseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Premise.
     * @param {PremiseUpsertArgs} args - Arguments to update or create a Premise.
     * @example
     * // Update or create a Premise
     * const premise = await prisma.premise.upsert({
     *   create: {
     *     // ... data to create a Premise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Premise we want to update
     *   }
     * })
    **/
    upsert<T extends PremiseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PremiseUpsertArgs<ExtArgs>>
    ): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Premises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseCountArgs} args - Arguments to filter Premises to count.
     * @example
     * // Count the number of Premises
     * const count = await prisma.premise.count({
     *   where: {
     *     // ... the filter for the Premises we want to count
     *   }
     * })
    **/
    count<T extends PremiseCountArgs>(
      args?: Subset<T, PremiseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Premise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiseAggregateArgs>(args: Subset<T, PremiseAggregateArgs>): Prisma.PrismaPromise<GetPremiseAggregateType<T>>

    /**
     * Group by Premise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiseGroupByArgs['orderBy'] }
        : { orderBy?: PremiseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Premise model
   */
  readonly fields: PremiseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Premise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PremiseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    RentalRef<T extends Premise$RentalRefArgs<ExtArgs> = {}>(args?: Subset<T, Premise$RentalRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findMany'> | Null>;

    TypePremises<T extends TypePremisesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypePremisesDefaultArgs<ExtArgs>>): Prisma__TypePremisesClient<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    DescriptionCharacteristicRef<T extends Premise$DescriptionCharacteristicRefArgs<ExtArgs> = {}>(args?: Subset<T, Premise$DescriptionCharacteristicRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Premise model
   */ 
  interface PremiseFieldRefs {
    readonly ID: FieldRef<"Premise", 'Int'>
    readonly ID_type: FieldRef<"Premise", 'Int'>
    readonly ID_owner: FieldRef<"Premise", 'Int'>
    readonly Name: FieldRef<"Premise", 'String'>
    readonly Image: FieldRef<"Premise", 'Bytes'>
    readonly Price: FieldRef<"Premise", 'Float'>
    readonly Address: FieldRef<"Premise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Premise findUnique
   */
  export type PremiseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter, which Premise to fetch.
     */
    where: PremiseWhereUniqueInput
  }

  /**
   * Premise findUniqueOrThrow
   */
  export type PremiseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter, which Premise to fetch.
     */
    where: PremiseWhereUniqueInput
  }

  /**
   * Premise findFirst
   */
  export type PremiseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter, which Premise to fetch.
     */
    where?: PremiseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Premises to fetch.
     */
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Premises.
     */
    cursor?: PremiseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Premises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Premises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Premises.
     */
    distinct?: PremiseScalarFieldEnum | PremiseScalarFieldEnum[]
  }

  /**
   * Premise findFirstOrThrow
   */
  export type PremiseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter, which Premise to fetch.
     */
    where?: PremiseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Premises to fetch.
     */
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Premises.
     */
    cursor?: PremiseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Premises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Premises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Premises.
     */
    distinct?: PremiseScalarFieldEnum | PremiseScalarFieldEnum[]
  }

  /**
   * Premise findMany
   */
  export type PremiseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter, which Premises to fetch.
     */
    where?: PremiseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Premises to fetch.
     */
    orderBy?: PremiseOrderByWithRelationInput | PremiseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Premises.
     */
    cursor?: PremiseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Premises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Premises.
     */
    skip?: number
    distinct?: PremiseScalarFieldEnum | PremiseScalarFieldEnum[]
  }

  /**
   * Premise create
   */
  export type PremiseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * The data needed to create a Premise.
     */
    data: XOR<PremiseCreateInput, PremiseUncheckedCreateInput>
  }

  /**
   * Premise createMany
   */
  export type PremiseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Premises.
     */
    data: PremiseCreateManyInput | PremiseCreateManyInput[]
  }

  /**
   * Premise update
   */
  export type PremiseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * The data needed to update a Premise.
     */
    data: XOR<PremiseUpdateInput, PremiseUncheckedUpdateInput>
    /**
     * Choose, which Premise to update.
     */
    where: PremiseWhereUniqueInput
  }

  /**
   * Premise updateMany
   */
  export type PremiseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Premises.
     */
    data: XOR<PremiseUpdateManyMutationInput, PremiseUncheckedUpdateManyInput>
    /**
     * Filter which Premises to update
     */
    where?: PremiseWhereInput
  }

  /**
   * Premise upsert
   */
  export type PremiseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * The filter to search for the Premise to update in case it exists.
     */
    where: PremiseWhereUniqueInput
    /**
     * In case the Premise found by the `where` argument doesn't exist, create a new Premise with this data.
     */
    create: XOR<PremiseCreateInput, PremiseUncheckedCreateInput>
    /**
     * In case the Premise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PremiseUpdateInput, PremiseUncheckedUpdateInput>
  }

  /**
   * Premise delete
   */
  export type PremiseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
    /**
     * Filter which Premise to delete.
     */
    where: PremiseWhereUniqueInput
  }

  /**
   * Premise deleteMany
   */
  export type PremiseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Premises to delete
     */
    where?: PremiseWhereInput
  }

  /**
   * Premise.RentalRef
   */
  export type Premise$RentalRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    cursor?: RentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Premise.DescriptionCharacteristicRef
   */
  export type Premise$DescriptionCharacteristicRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    where?: DescriptionCharacteristicWhereInput
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    cursor?: DescriptionCharacteristicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DescriptionCharacteristicScalarFieldEnum | DescriptionCharacteristicScalarFieldEnum[]
  }

  /**
   * Premise without action
   */
  export type PremiseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Premise
     */
    select?: PremiseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiseInclude<ExtArgs> | null
  }


  /**
   * Model Rental
   */

  export type AggregateRental = {
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  export type RentalAvgAggregateOutputType = {
    ID: number | null
    ID_premise: number | null
    ID_tenant: number | null
    Status: number | null
  }

  export type RentalSumAggregateOutputType = {
    ID: number | null
    ID_premise: number | null
    ID_tenant: number | null
    Status: number | null
  }

  export type RentalMinAggregateOutputType = {
    ID: number | null
    ID_premise: number | null
    ID_tenant: number | null
    Status: number | null
    StartDate: Date | null
  }

  export type RentalMaxAggregateOutputType = {
    ID: number | null
    ID_premise: number | null
    ID_tenant: number | null
    Status: number | null
    StartDate: Date | null
  }

  export type RentalCountAggregateOutputType = {
    ID: number
    ID_premise: number
    ID_tenant: number
    Status: number
    StartDate: number
    _all: number
  }


  export type RentalAvgAggregateInputType = {
    ID?: true
    ID_premise?: true
    ID_tenant?: true
    Status?: true
  }

  export type RentalSumAggregateInputType = {
    ID?: true
    ID_premise?: true
    ID_tenant?: true
    Status?: true
  }

  export type RentalMinAggregateInputType = {
    ID?: true
    ID_premise?: true
    ID_tenant?: true
    Status?: true
    StartDate?: true
  }

  export type RentalMaxAggregateInputType = {
    ID?: true
    ID_premise?: true
    ID_tenant?: true
    Status?: true
    StartDate?: true
  }

  export type RentalCountAggregateInputType = {
    ID?: true
    ID_premise?: true
    ID_tenant?: true
    Status?: true
    StartDate?: true
    _all?: true
  }

  export type RentalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rental to aggregate.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rentals
    **/
    _count?: true | RentalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentalMaxAggregateInputType
  }

  export type GetRentalAggregateType<T extends RentalAggregateArgs> = {
        [P in keyof T & keyof AggregateRental]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRental[P]>
      : GetScalarType<T[P], AggregateRental[P]>
  }




  export type RentalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RentalWhereInput
    orderBy?: RentalOrderByWithAggregationInput | RentalOrderByWithAggregationInput[]
    by: RentalScalarFieldEnum[] | RentalScalarFieldEnum
    having?: RentalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentalCountAggregateInputType | true
    _avg?: RentalAvgAggregateInputType
    _sum?: RentalSumAggregateInputType
    _min?: RentalMinAggregateInputType
    _max?: RentalMaxAggregateInputType
  }

  export type RentalGroupByOutputType = {
    ID: number
    ID_premise: number
    ID_tenant: number
    Status: number
    StartDate: Date | null
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  type GetRentalGroupByPayload<T extends RentalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentalGroupByOutputType[P]>
            : GetScalarType<T[P], RentalGroupByOutputType[P]>
        }
      >
    >


  export type RentalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    ID_premise?: boolean
    ID_tenant?: boolean
    Status?: boolean
    StartDate?: boolean
    Premise?: boolean | PremiseDefaultArgs<ExtArgs>
    Tenant?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rental"]>

  export type RentalSelectScalar = {
    ID?: boolean
    ID_premise?: boolean
    ID_tenant?: boolean
    Status?: boolean
    StartDate?: boolean
  }


  export type RentalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Premise?: boolean | PremiseDefaultArgs<ExtArgs>
    Tenant?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $RentalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rental"
    objects: {
      Premise: Prisma.$PremisePayload<ExtArgs>
      Tenant: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      ID_premise: number
      ID_tenant: number
      Status: number
      StartDate: Date | null
    }, ExtArgs["result"]["rental"]>
    composites: {}
  }


  type RentalGetPayload<S extends boolean | null | undefined | RentalDefaultArgs> = $Result.GetResult<Prisma.$RentalPayload, S>

  type RentalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RentalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RentalCountAggregateInputType | true
    }

  export interface RentalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rental'], meta: { name: 'Rental' } }
    /**
     * Find zero or one Rental that matches the filter.
     * @param {RentalFindUniqueArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RentalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RentalFindUniqueArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rental that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RentalFindUniqueOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RentalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rental that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindFirstArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RentalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalFindFirstArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rental that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindFirstOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RentalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rentals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rentals
     * const rentals = await prisma.rental.findMany()
     * 
     * // Get first 10 Rentals
     * const rentals = await prisma.rental.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const rentalWithIDOnly = await prisma.rental.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends RentalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rental.
     * @param {RentalCreateArgs} args - Arguments to create a Rental.
     * @example
     * // Create one Rental
     * const Rental = await prisma.rental.create({
     *   data: {
     *     // ... data to create a Rental
     *   }
     * })
     * 
    **/
    create<T extends RentalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RentalCreateArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rentals.
     *     @param {RentalCreateManyArgs} args - Arguments to create many Rentals.
     *     @example
     *     // Create many Rentals
     *     const rental = await prisma.rental.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RentalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rental.
     * @param {RentalDeleteArgs} args - Arguments to delete one Rental.
     * @example
     * // Delete one Rental
     * const Rental = await prisma.rental.delete({
     *   where: {
     *     // ... filter to delete one Rental
     *   }
     * })
     * 
    **/
    delete<T extends RentalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RentalDeleteArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rental.
     * @param {RentalUpdateArgs} args - Arguments to update one Rental.
     * @example
     * // Update one Rental
     * const rental = await prisma.rental.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RentalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RentalUpdateArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rentals.
     * @param {RentalDeleteManyArgs} args - Arguments to filter Rentals to delete.
     * @example
     * // Delete a few Rentals
     * const { count } = await prisma.rental.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RentalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RentalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rentals
     * const rental = await prisma.rental.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RentalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RentalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rental.
     * @param {RentalUpsertArgs} args - Arguments to update or create a Rental.
     * @example
     * // Update or create a Rental
     * const rental = await prisma.rental.upsert({
     *   create: {
     *     // ... data to create a Rental
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rental we want to update
     *   }
     * })
    **/
    upsert<T extends RentalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RentalUpsertArgs<ExtArgs>>
    ): Prisma__RentalClient<$Result.GetResult<Prisma.$RentalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalCountArgs} args - Arguments to filter Rentals to count.
     * @example
     * // Count the number of Rentals
     * const count = await prisma.rental.count({
     *   where: {
     *     // ... the filter for the Rentals we want to count
     *   }
     * })
    **/
    count<T extends RentalCountArgs>(
      args?: Subset<T, RentalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentalAggregateArgs>(args: Subset<T, RentalAggregateArgs>): Prisma.PrismaPromise<GetRentalAggregateType<T>>

    /**
     * Group by Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RentalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RentalGroupByArgs['orderBy'] }
        : { orderBy?: RentalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RentalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rental model
   */
  readonly fields: RentalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rental.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RentalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Premise<T extends PremiseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PremiseDefaultArgs<ExtArgs>>): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Tenant<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rental model
   */ 
  interface RentalFieldRefs {
    readonly ID: FieldRef<"Rental", 'Int'>
    readonly ID_premise: FieldRef<"Rental", 'Int'>
    readonly ID_tenant: FieldRef<"Rental", 'Int'>
    readonly Status: FieldRef<"Rental", 'Int'>
    readonly StartDate: FieldRef<"Rental", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rental findUnique
   */
  export type RentalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental findUniqueOrThrow
   */
  export type RentalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental findFirst
   */
  export type RentalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental findFirstOrThrow
   */
  export type RentalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rental to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental findMany
   */
  export type RentalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter, which Rentals to fetch.
     */
    where?: RentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rentals to fetch.
     */
    orderBy?: RentalOrderByWithRelationInput | RentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rentals.
     */
    cursor?: RentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rentals.
     */
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * Rental create
   */
  export type RentalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The data needed to create a Rental.
     */
    data: XOR<RentalCreateInput, RentalUncheckedCreateInput>
  }

  /**
   * Rental createMany
   */
  export type RentalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rentals.
     */
    data: RentalCreateManyInput | RentalCreateManyInput[]
  }

  /**
   * Rental update
   */
  export type RentalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The data needed to update a Rental.
     */
    data: XOR<RentalUpdateInput, RentalUncheckedUpdateInput>
    /**
     * Choose, which Rental to update.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental updateMany
   */
  export type RentalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rentals.
     */
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyInput>
    /**
     * Filter which Rentals to update
     */
    where?: RentalWhereInput
  }

  /**
   * Rental upsert
   */
  export type RentalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * The filter to search for the Rental to update in case it exists.
     */
    where: RentalWhereUniqueInput
    /**
     * In case the Rental found by the `where` argument doesn't exist, create a new Rental with this data.
     */
    create: XOR<RentalCreateInput, RentalUncheckedCreateInput>
    /**
     * In case the Rental was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RentalUpdateInput, RentalUncheckedUpdateInput>
  }

  /**
   * Rental delete
   */
  export type RentalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
    /**
     * Filter which Rental to delete.
     */
    where: RentalWhereUniqueInput
  }

  /**
   * Rental deleteMany
   */
  export type RentalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rentals to delete
     */
    where?: RentalWhereInput
  }

  /**
   * Rental without action
   */
  export type RentalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rental
     */
    select?: RentalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RentalInclude<ExtArgs> | null
  }


  /**
   * Model Characteristic
   */

  export type AggregateCharacteristic = {
    _count: CharacteristicCountAggregateOutputType | null
    _avg: CharacteristicAvgAggregateOutputType | null
    _sum: CharacteristicSumAggregateOutputType | null
    _min: CharacteristicMinAggregateOutputType | null
    _max: CharacteristicMaxAggregateOutputType | null
  }

  export type CharacteristicAvgAggregateOutputType = {
    ID: number | null
  }

  export type CharacteristicSumAggregateOutputType = {
    ID: number | null
  }

  export type CharacteristicMinAggregateOutputType = {
    ID: number | null
    Name: string | null
  }

  export type CharacteristicMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
  }

  export type CharacteristicCountAggregateOutputType = {
    ID: number
    Name: number
    _all: number
  }


  export type CharacteristicAvgAggregateInputType = {
    ID?: true
  }

  export type CharacteristicSumAggregateInputType = {
    ID?: true
  }

  export type CharacteristicMinAggregateInputType = {
    ID?: true
    Name?: true
  }

  export type CharacteristicMaxAggregateInputType = {
    ID?: true
    Name?: true
  }

  export type CharacteristicCountAggregateInputType = {
    ID?: true
    Name?: true
    _all?: true
  }

  export type CharacteristicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characteristic to aggregate.
     */
    where?: CharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characteristics to fetch.
     */
    orderBy?: CharacteristicOrderByWithRelationInput | CharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characteristics
    **/
    _count?: true | CharacteristicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacteristicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacteristicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacteristicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacteristicMaxAggregateInputType
  }

  export type GetCharacteristicAggregateType<T extends CharacteristicAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacteristic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacteristic[P]>
      : GetScalarType<T[P], AggregateCharacteristic[P]>
  }




  export type CharacteristicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacteristicWhereInput
    orderBy?: CharacteristicOrderByWithAggregationInput | CharacteristicOrderByWithAggregationInput[]
    by: CharacteristicScalarFieldEnum[] | CharacteristicScalarFieldEnum
    having?: CharacteristicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacteristicCountAggregateInputType | true
    _avg?: CharacteristicAvgAggregateInputType
    _sum?: CharacteristicSumAggregateInputType
    _min?: CharacteristicMinAggregateInputType
    _max?: CharacteristicMaxAggregateInputType
  }

  export type CharacteristicGroupByOutputType = {
    ID: number
    Name: string
    _count: CharacteristicCountAggregateOutputType | null
    _avg: CharacteristicAvgAggregateOutputType | null
    _sum: CharacteristicSumAggregateOutputType | null
    _min: CharacteristicMinAggregateOutputType | null
    _max: CharacteristicMaxAggregateOutputType | null
  }

  type GetCharacteristicGroupByPayload<T extends CharacteristicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacteristicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacteristicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacteristicGroupByOutputType[P]>
            : GetScalarType<T[P], CharacteristicGroupByOutputType[P]>
        }
      >
    >


  export type CharacteristicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    TypePremises?: boolean | Characteristic$TypePremisesArgs<ExtArgs>
    DescriptionCharacteristicRef?: boolean | Characteristic$DescriptionCharacteristicRefArgs<ExtArgs>
    _count?: boolean | CharacteristicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["characteristic"]>

  export type CharacteristicSelectScalar = {
    ID?: boolean
    Name?: boolean
  }


  export type CharacteristicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TypePremises?: boolean | Characteristic$TypePremisesArgs<ExtArgs>
    DescriptionCharacteristicRef?: boolean | Characteristic$DescriptionCharacteristicRefArgs<ExtArgs>
    _count?: boolean | CharacteristicCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CharacteristicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Characteristic"
    objects: {
      TypePremises: Prisma.$TypePremisesPayload<ExtArgs>[]
      DescriptionCharacteristicRef: Prisma.$DescriptionCharacteristicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Name: string
    }, ExtArgs["result"]["characteristic"]>
    composites: {}
  }


  type CharacteristicGetPayload<S extends boolean | null | undefined | CharacteristicDefaultArgs> = $Result.GetResult<Prisma.$CharacteristicPayload, S>

  type CharacteristicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacteristicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacteristicCountAggregateInputType | true
    }

  export interface CharacteristicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Characteristic'], meta: { name: 'Characteristic' } }
    /**
     * Find zero or one Characteristic that matches the filter.
     * @param {CharacteristicFindUniqueArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CharacteristicFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicFindUniqueArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Characteristic that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CharacteristicFindUniqueOrThrowArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CharacteristicFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Characteristic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindFirstArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CharacteristicFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicFindFirstArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Characteristic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindFirstOrThrowArgs} args - Arguments to find a Characteristic
     * @example
     * // Get one Characteristic
     * const characteristic = await prisma.characteristic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CharacteristicFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Characteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characteristics
     * const characteristics = await prisma.characteristic.findMany()
     * 
     * // Get first 10 Characteristics
     * const characteristics = await prisma.characteristic.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const characteristicWithIDOnly = await prisma.characteristic.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends CharacteristicFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Characteristic.
     * @param {CharacteristicCreateArgs} args - Arguments to create a Characteristic.
     * @example
     * // Create one Characteristic
     * const Characteristic = await prisma.characteristic.create({
     *   data: {
     *     // ... data to create a Characteristic
     *   }
     * })
     * 
    **/
    create<T extends CharacteristicCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicCreateArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Characteristics.
     *     @param {CharacteristicCreateManyArgs} args - Arguments to create many Characteristics.
     *     @example
     *     // Create many Characteristics
     *     const characteristic = await prisma.characteristic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CharacteristicCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Characteristic.
     * @param {CharacteristicDeleteArgs} args - Arguments to delete one Characteristic.
     * @example
     * // Delete one Characteristic
     * const Characteristic = await prisma.characteristic.delete({
     *   where: {
     *     // ... filter to delete one Characteristic
     *   }
     * })
     * 
    **/
    delete<T extends CharacteristicDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicDeleteArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Characteristic.
     * @param {CharacteristicUpdateArgs} args - Arguments to update one Characteristic.
     * @example
     * // Update one Characteristic
     * const characteristic = await prisma.characteristic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CharacteristicUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicUpdateArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Characteristics.
     * @param {CharacteristicDeleteManyArgs} args - Arguments to filter Characteristics to delete.
     * @example
     * // Delete a few Characteristics
     * const { count } = await prisma.characteristic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CharacteristicDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacteristicDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characteristics
     * const characteristic = await prisma.characteristic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CharacteristicUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Characteristic.
     * @param {CharacteristicUpsertArgs} args - Arguments to update or create a Characteristic.
     * @example
     * // Update or create a Characteristic
     * const characteristic = await prisma.characteristic.upsert({
     *   create: {
     *     // ... data to create a Characteristic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Characteristic we want to update
     *   }
     * })
    **/
    upsert<T extends CharacteristicUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CharacteristicUpsertArgs<ExtArgs>>
    ): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Characteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicCountArgs} args - Arguments to filter Characteristics to count.
     * @example
     * // Count the number of Characteristics
     * const count = await prisma.characteristic.count({
     *   where: {
     *     // ... the filter for the Characteristics we want to count
     *   }
     * })
    **/
    count<T extends CharacteristicCountArgs>(
      args?: Subset<T, CharacteristicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacteristicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Characteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacteristicAggregateArgs>(args: Subset<T, CharacteristicAggregateArgs>): Prisma.PrismaPromise<GetCharacteristicAggregateType<T>>

    /**
     * Group by Characteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacteristicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacteristicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacteristicGroupByArgs['orderBy'] }
        : { orderBy?: CharacteristicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacteristicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacteristicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Characteristic model
   */
  readonly fields: CharacteristicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Characteristic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacteristicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    TypePremises<T extends Characteristic$TypePremisesArgs<ExtArgs> = {}>(args?: Subset<T, Characteristic$TypePremisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePremisesPayload<ExtArgs>, T, 'findMany'> | Null>;

    DescriptionCharacteristicRef<T extends Characteristic$DescriptionCharacteristicRefArgs<ExtArgs> = {}>(args?: Subset<T, Characteristic$DescriptionCharacteristicRefArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Characteristic model
   */ 
  interface CharacteristicFieldRefs {
    readonly ID: FieldRef<"Characteristic", 'Int'>
    readonly Name: FieldRef<"Characteristic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Characteristic findUnique
   */
  export type CharacteristicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which Characteristic to fetch.
     */
    where: CharacteristicWhereUniqueInput
  }

  /**
   * Characteristic findUniqueOrThrow
   */
  export type CharacteristicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which Characteristic to fetch.
     */
    where: CharacteristicWhereUniqueInput
  }

  /**
   * Characteristic findFirst
   */
  export type CharacteristicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which Characteristic to fetch.
     */
    where?: CharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characteristics to fetch.
     */
    orderBy?: CharacteristicOrderByWithRelationInput | CharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characteristics.
     */
    cursor?: CharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characteristics.
     */
    distinct?: CharacteristicScalarFieldEnum | CharacteristicScalarFieldEnum[]
  }

  /**
   * Characteristic findFirstOrThrow
   */
  export type CharacteristicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which Characteristic to fetch.
     */
    where?: CharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characteristics to fetch.
     */
    orderBy?: CharacteristicOrderByWithRelationInput | CharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characteristics.
     */
    cursor?: CharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characteristics.
     */
    distinct?: CharacteristicScalarFieldEnum | CharacteristicScalarFieldEnum[]
  }

  /**
   * Characteristic findMany
   */
  export type CharacteristicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which Characteristics to fetch.
     */
    where?: CharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characteristics to fetch.
     */
    orderBy?: CharacteristicOrderByWithRelationInput | CharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characteristics.
     */
    cursor?: CharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characteristics.
     */
    skip?: number
    distinct?: CharacteristicScalarFieldEnum | CharacteristicScalarFieldEnum[]
  }

  /**
   * Characteristic create
   */
  export type CharacteristicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * The data needed to create a Characteristic.
     */
    data: XOR<CharacteristicCreateInput, CharacteristicUncheckedCreateInput>
  }

  /**
   * Characteristic createMany
   */
  export type CharacteristicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characteristics.
     */
    data: CharacteristicCreateManyInput | CharacteristicCreateManyInput[]
  }

  /**
   * Characteristic update
   */
  export type CharacteristicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * The data needed to update a Characteristic.
     */
    data: XOR<CharacteristicUpdateInput, CharacteristicUncheckedUpdateInput>
    /**
     * Choose, which Characteristic to update.
     */
    where: CharacteristicWhereUniqueInput
  }

  /**
   * Characteristic updateMany
   */
  export type CharacteristicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characteristics.
     */
    data: XOR<CharacteristicUpdateManyMutationInput, CharacteristicUncheckedUpdateManyInput>
    /**
     * Filter which Characteristics to update
     */
    where?: CharacteristicWhereInput
  }

  /**
   * Characteristic upsert
   */
  export type CharacteristicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * The filter to search for the Characteristic to update in case it exists.
     */
    where: CharacteristicWhereUniqueInput
    /**
     * In case the Characteristic found by the `where` argument doesn't exist, create a new Characteristic with this data.
     */
    create: XOR<CharacteristicCreateInput, CharacteristicUncheckedCreateInput>
    /**
     * In case the Characteristic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacteristicUpdateInput, CharacteristicUncheckedUpdateInput>
  }

  /**
   * Characteristic delete
   */
  export type CharacteristicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
    /**
     * Filter which Characteristic to delete.
     */
    where: CharacteristicWhereUniqueInput
  }

  /**
   * Characteristic deleteMany
   */
  export type CharacteristicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characteristics to delete
     */
    where?: CharacteristicWhereInput
  }

  /**
   * Characteristic.TypePremises
   */
  export type Characteristic$TypePremisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypePremises
     */
    select?: TypePremisesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypePremisesInclude<ExtArgs> | null
    where?: TypePremisesWhereInput
    orderBy?: TypePremisesOrderByWithRelationInput | TypePremisesOrderByWithRelationInput[]
    cursor?: TypePremisesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TypePremisesScalarFieldEnum | TypePremisesScalarFieldEnum[]
  }

  /**
   * Characteristic.DescriptionCharacteristicRef
   */
  export type Characteristic$DescriptionCharacteristicRefArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    where?: DescriptionCharacteristicWhereInput
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    cursor?: DescriptionCharacteristicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DescriptionCharacteristicScalarFieldEnum | DescriptionCharacteristicScalarFieldEnum[]
  }

  /**
   * Characteristic without action
   */
  export type CharacteristicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Characteristic
     */
    select?: CharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CharacteristicInclude<ExtArgs> | null
  }


  /**
   * Model DescriptionCharacteristic
   */

  export type AggregateDescriptionCharacteristic = {
    _count: DescriptionCharacteristicCountAggregateOutputType | null
    _avg: DescriptionCharacteristicAvgAggregateOutputType | null
    _sum: DescriptionCharacteristicSumAggregateOutputType | null
    _min: DescriptionCharacteristicMinAggregateOutputType | null
    _max: DescriptionCharacteristicMaxAggregateOutputType | null
  }

  export type DescriptionCharacteristicAvgAggregateOutputType = {
    ID: number | null
    ID_characteristic: number | null
    ID_premise: number | null
  }

  export type DescriptionCharacteristicSumAggregateOutputType = {
    ID: number | null
    ID_characteristic: number | null
    ID_premise: number | null
  }

  export type DescriptionCharacteristicMinAggregateOutputType = {
    ID: number | null
    ID_characteristic: number | null
    ID_premise: number | null
    Description: string | null
  }

  export type DescriptionCharacteristicMaxAggregateOutputType = {
    ID: number | null
    ID_characteristic: number | null
    ID_premise: number | null
    Description: string | null
  }

  export type DescriptionCharacteristicCountAggregateOutputType = {
    ID: number
    ID_characteristic: number
    ID_premise: number
    Description: number
    _all: number
  }


  export type DescriptionCharacteristicAvgAggregateInputType = {
    ID?: true
    ID_characteristic?: true
    ID_premise?: true
  }

  export type DescriptionCharacteristicSumAggregateInputType = {
    ID?: true
    ID_characteristic?: true
    ID_premise?: true
  }

  export type DescriptionCharacteristicMinAggregateInputType = {
    ID?: true
    ID_characteristic?: true
    ID_premise?: true
    Description?: true
  }

  export type DescriptionCharacteristicMaxAggregateInputType = {
    ID?: true
    ID_characteristic?: true
    ID_premise?: true
    Description?: true
  }

  export type DescriptionCharacteristicCountAggregateInputType = {
    ID?: true
    ID_characteristic?: true
    ID_premise?: true
    Description?: true
    _all?: true
  }

  export type DescriptionCharacteristicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DescriptionCharacteristic to aggregate.
     */
    where?: DescriptionCharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionCharacteristics to fetch.
     */
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DescriptionCharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DescriptionCharacteristics
    **/
    _count?: true | DescriptionCharacteristicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DescriptionCharacteristicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DescriptionCharacteristicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DescriptionCharacteristicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DescriptionCharacteristicMaxAggregateInputType
  }

  export type GetDescriptionCharacteristicAggregateType<T extends DescriptionCharacteristicAggregateArgs> = {
        [P in keyof T & keyof AggregateDescriptionCharacteristic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDescriptionCharacteristic[P]>
      : GetScalarType<T[P], AggregateDescriptionCharacteristic[P]>
  }




  export type DescriptionCharacteristicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DescriptionCharacteristicWhereInput
    orderBy?: DescriptionCharacteristicOrderByWithAggregationInput | DescriptionCharacteristicOrderByWithAggregationInput[]
    by: DescriptionCharacteristicScalarFieldEnum[] | DescriptionCharacteristicScalarFieldEnum
    having?: DescriptionCharacteristicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DescriptionCharacteristicCountAggregateInputType | true
    _avg?: DescriptionCharacteristicAvgAggregateInputType
    _sum?: DescriptionCharacteristicSumAggregateInputType
    _min?: DescriptionCharacteristicMinAggregateInputType
    _max?: DescriptionCharacteristicMaxAggregateInputType
  }

  export type DescriptionCharacteristicGroupByOutputType = {
    ID: number
    ID_characteristic: number
    ID_premise: number
    Description: string
    _count: DescriptionCharacteristicCountAggregateOutputType | null
    _avg: DescriptionCharacteristicAvgAggregateOutputType | null
    _sum: DescriptionCharacteristicSumAggregateOutputType | null
    _min: DescriptionCharacteristicMinAggregateOutputType | null
    _max: DescriptionCharacteristicMaxAggregateOutputType | null
  }

  type GetDescriptionCharacteristicGroupByPayload<T extends DescriptionCharacteristicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DescriptionCharacteristicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DescriptionCharacteristicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DescriptionCharacteristicGroupByOutputType[P]>
            : GetScalarType<T[P], DescriptionCharacteristicGroupByOutputType[P]>
        }
      >
    >


  export type DescriptionCharacteristicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    ID_characteristic?: boolean
    ID_premise?: boolean
    Description?: boolean
    Characteristic?: boolean | CharacteristicDefaultArgs<ExtArgs>
    Premise?: boolean | PremiseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["descriptionCharacteristic"]>

  export type DescriptionCharacteristicSelectScalar = {
    ID?: boolean
    ID_characteristic?: boolean
    ID_premise?: boolean
    Description?: boolean
  }


  export type DescriptionCharacteristicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Characteristic?: boolean | CharacteristicDefaultArgs<ExtArgs>
    Premise?: boolean | PremiseDefaultArgs<ExtArgs>
  }


  export type $DescriptionCharacteristicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DescriptionCharacteristic"
    objects: {
      Characteristic: Prisma.$CharacteristicPayload<ExtArgs>
      Premise: Prisma.$PremisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      ID_characteristic: number
      ID_premise: number
      Description: string
    }, ExtArgs["result"]["descriptionCharacteristic"]>
    composites: {}
  }


  type DescriptionCharacteristicGetPayload<S extends boolean | null | undefined | DescriptionCharacteristicDefaultArgs> = $Result.GetResult<Prisma.$DescriptionCharacteristicPayload, S>

  type DescriptionCharacteristicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DescriptionCharacteristicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DescriptionCharacteristicCountAggregateInputType | true
    }

  export interface DescriptionCharacteristicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DescriptionCharacteristic'], meta: { name: 'DescriptionCharacteristic' } }
    /**
     * Find zero or one DescriptionCharacteristic that matches the filter.
     * @param {DescriptionCharacteristicFindUniqueArgs} args - Arguments to find a DescriptionCharacteristic
     * @example
     * // Get one DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DescriptionCharacteristicFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicFindUniqueArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DescriptionCharacteristic that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DescriptionCharacteristicFindUniqueOrThrowArgs} args - Arguments to find a DescriptionCharacteristic
     * @example
     * // Get one DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DescriptionCharacteristicFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DescriptionCharacteristic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicFindFirstArgs} args - Arguments to find a DescriptionCharacteristic
     * @example
     * // Get one DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DescriptionCharacteristicFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicFindFirstArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DescriptionCharacteristic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicFindFirstOrThrowArgs} args - Arguments to find a DescriptionCharacteristic
     * @example
     * // Get one DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DescriptionCharacteristicFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DescriptionCharacteristics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DescriptionCharacteristics
     * const descriptionCharacteristics = await prisma.descriptionCharacteristic.findMany()
     * 
     * // Get first 10 DescriptionCharacteristics
     * const descriptionCharacteristics = await prisma.descriptionCharacteristic.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const descriptionCharacteristicWithIDOnly = await prisma.descriptionCharacteristic.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends DescriptionCharacteristicFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DescriptionCharacteristic.
     * @param {DescriptionCharacteristicCreateArgs} args - Arguments to create a DescriptionCharacteristic.
     * @example
     * // Create one DescriptionCharacteristic
     * const DescriptionCharacteristic = await prisma.descriptionCharacteristic.create({
     *   data: {
     *     // ... data to create a DescriptionCharacteristic
     *   }
     * })
     * 
    **/
    create<T extends DescriptionCharacteristicCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicCreateArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DescriptionCharacteristics.
     *     @param {DescriptionCharacteristicCreateManyArgs} args - Arguments to create many DescriptionCharacteristics.
     *     @example
     *     // Create many DescriptionCharacteristics
     *     const descriptionCharacteristic = await prisma.descriptionCharacteristic.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DescriptionCharacteristicCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DescriptionCharacteristic.
     * @param {DescriptionCharacteristicDeleteArgs} args - Arguments to delete one DescriptionCharacteristic.
     * @example
     * // Delete one DescriptionCharacteristic
     * const DescriptionCharacteristic = await prisma.descriptionCharacteristic.delete({
     *   where: {
     *     // ... filter to delete one DescriptionCharacteristic
     *   }
     * })
     * 
    **/
    delete<T extends DescriptionCharacteristicDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicDeleteArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DescriptionCharacteristic.
     * @param {DescriptionCharacteristicUpdateArgs} args - Arguments to update one DescriptionCharacteristic.
     * @example
     * // Update one DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DescriptionCharacteristicUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicUpdateArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DescriptionCharacteristics.
     * @param {DescriptionCharacteristicDeleteManyArgs} args - Arguments to filter DescriptionCharacteristics to delete.
     * @example
     * // Delete a few DescriptionCharacteristics
     * const { count } = await prisma.descriptionCharacteristic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DescriptionCharacteristicDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DescriptionCharacteristicDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DescriptionCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DescriptionCharacteristics
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DescriptionCharacteristicUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DescriptionCharacteristic.
     * @param {DescriptionCharacteristicUpsertArgs} args - Arguments to update or create a DescriptionCharacteristic.
     * @example
     * // Update or create a DescriptionCharacteristic
     * const descriptionCharacteristic = await prisma.descriptionCharacteristic.upsert({
     *   create: {
     *     // ... data to create a DescriptionCharacteristic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DescriptionCharacteristic we want to update
     *   }
     * })
    **/
    upsert<T extends DescriptionCharacteristicUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DescriptionCharacteristicUpsertArgs<ExtArgs>>
    ): Prisma__DescriptionCharacteristicClient<$Result.GetResult<Prisma.$DescriptionCharacteristicPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DescriptionCharacteristics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicCountArgs} args - Arguments to filter DescriptionCharacteristics to count.
     * @example
     * // Count the number of DescriptionCharacteristics
     * const count = await prisma.descriptionCharacteristic.count({
     *   where: {
     *     // ... the filter for the DescriptionCharacteristics we want to count
     *   }
     * })
    **/
    count<T extends DescriptionCharacteristicCountArgs>(
      args?: Subset<T, DescriptionCharacteristicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DescriptionCharacteristicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DescriptionCharacteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DescriptionCharacteristicAggregateArgs>(args: Subset<T, DescriptionCharacteristicAggregateArgs>): Prisma.PrismaPromise<GetDescriptionCharacteristicAggregateType<T>>

    /**
     * Group by DescriptionCharacteristic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DescriptionCharacteristicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DescriptionCharacteristicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DescriptionCharacteristicGroupByArgs['orderBy'] }
        : { orderBy?: DescriptionCharacteristicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DescriptionCharacteristicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDescriptionCharacteristicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DescriptionCharacteristic model
   */
  readonly fields: DescriptionCharacteristicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DescriptionCharacteristic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DescriptionCharacteristicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Characteristic<T extends CharacteristicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacteristicDefaultArgs<ExtArgs>>): Prisma__CharacteristicClient<$Result.GetResult<Prisma.$CharacteristicPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Premise<T extends PremiseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PremiseDefaultArgs<ExtArgs>>): Prisma__PremiseClient<$Result.GetResult<Prisma.$PremisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DescriptionCharacteristic model
   */ 
  interface DescriptionCharacteristicFieldRefs {
    readonly ID: FieldRef<"DescriptionCharacteristic", 'Int'>
    readonly ID_characteristic: FieldRef<"DescriptionCharacteristic", 'Int'>
    readonly ID_premise: FieldRef<"DescriptionCharacteristic", 'Int'>
    readonly Description: FieldRef<"DescriptionCharacteristic", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DescriptionCharacteristic findUnique
   */
  export type DescriptionCharacteristicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionCharacteristic to fetch.
     */
    where: DescriptionCharacteristicWhereUniqueInput
  }

  /**
   * DescriptionCharacteristic findUniqueOrThrow
   */
  export type DescriptionCharacteristicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionCharacteristic to fetch.
     */
    where: DescriptionCharacteristicWhereUniqueInput
  }

  /**
   * DescriptionCharacteristic findFirst
   */
  export type DescriptionCharacteristicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionCharacteristic to fetch.
     */
    where?: DescriptionCharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionCharacteristics to fetch.
     */
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DescriptionCharacteristics.
     */
    cursor?: DescriptionCharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DescriptionCharacteristics.
     */
    distinct?: DescriptionCharacteristicScalarFieldEnum | DescriptionCharacteristicScalarFieldEnum[]
  }

  /**
   * DescriptionCharacteristic findFirstOrThrow
   */
  export type DescriptionCharacteristicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionCharacteristic to fetch.
     */
    where?: DescriptionCharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionCharacteristics to fetch.
     */
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DescriptionCharacteristics.
     */
    cursor?: DescriptionCharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionCharacteristics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DescriptionCharacteristics.
     */
    distinct?: DescriptionCharacteristicScalarFieldEnum | DescriptionCharacteristicScalarFieldEnum[]
  }

  /**
   * DescriptionCharacteristic findMany
   */
  export type DescriptionCharacteristicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter, which DescriptionCharacteristics to fetch.
     */
    where?: DescriptionCharacteristicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DescriptionCharacteristics to fetch.
     */
    orderBy?: DescriptionCharacteristicOrderByWithRelationInput | DescriptionCharacteristicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DescriptionCharacteristics.
     */
    cursor?: DescriptionCharacteristicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DescriptionCharacteristics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DescriptionCharacteristics.
     */
    skip?: number
    distinct?: DescriptionCharacteristicScalarFieldEnum | DescriptionCharacteristicScalarFieldEnum[]
  }

  /**
   * DescriptionCharacteristic create
   */
  export type DescriptionCharacteristicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * The data needed to create a DescriptionCharacteristic.
     */
    data: XOR<DescriptionCharacteristicCreateInput, DescriptionCharacteristicUncheckedCreateInput>
  }

  /**
   * DescriptionCharacteristic createMany
   */
  export type DescriptionCharacteristicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DescriptionCharacteristics.
     */
    data: DescriptionCharacteristicCreateManyInput | DescriptionCharacteristicCreateManyInput[]
  }

  /**
   * DescriptionCharacteristic update
   */
  export type DescriptionCharacteristicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * The data needed to update a DescriptionCharacteristic.
     */
    data: XOR<DescriptionCharacteristicUpdateInput, DescriptionCharacteristicUncheckedUpdateInput>
    /**
     * Choose, which DescriptionCharacteristic to update.
     */
    where: DescriptionCharacteristicWhereUniqueInput
  }

  /**
   * DescriptionCharacteristic updateMany
   */
  export type DescriptionCharacteristicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DescriptionCharacteristics.
     */
    data: XOR<DescriptionCharacteristicUpdateManyMutationInput, DescriptionCharacteristicUncheckedUpdateManyInput>
    /**
     * Filter which DescriptionCharacteristics to update
     */
    where?: DescriptionCharacteristicWhereInput
  }

  /**
   * DescriptionCharacteristic upsert
   */
  export type DescriptionCharacteristicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * The filter to search for the DescriptionCharacteristic to update in case it exists.
     */
    where: DescriptionCharacteristicWhereUniqueInput
    /**
     * In case the DescriptionCharacteristic found by the `where` argument doesn't exist, create a new DescriptionCharacteristic with this data.
     */
    create: XOR<DescriptionCharacteristicCreateInput, DescriptionCharacteristicUncheckedCreateInput>
    /**
     * In case the DescriptionCharacteristic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DescriptionCharacteristicUpdateInput, DescriptionCharacteristicUncheckedUpdateInput>
  }

  /**
   * DescriptionCharacteristic delete
   */
  export type DescriptionCharacteristicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
    /**
     * Filter which DescriptionCharacteristic to delete.
     */
    where: DescriptionCharacteristicWhereUniqueInput
  }

  /**
   * DescriptionCharacteristic deleteMany
   */
  export type DescriptionCharacteristicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DescriptionCharacteristics to delete
     */
    where?: DescriptionCharacteristicWhereInput
  }

  /**
   * DescriptionCharacteristic without action
   */
  export type DescriptionCharacteristicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DescriptionCharacteristic
     */
    select?: DescriptionCharacteristicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DescriptionCharacteristicInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    ID: 'ID',
    Login: 'Login',
    Password: 'Password',
    Role: 'Role',
    Name: 'Name',
    Surname: 'Surname',
    PhoneNumber: 'PhoneNumber',
    Photo: 'Photo'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TypePremisesScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name'
  };

  export type TypePremisesScalarFieldEnum = (typeof TypePremisesScalarFieldEnum)[keyof typeof TypePremisesScalarFieldEnum]


  export const PremiseScalarFieldEnum: {
    ID: 'ID',
    ID_type: 'ID_type',
    ID_owner: 'ID_owner',
    Name: 'Name',
    Image: 'Image',
    Price: 'Price',
    Address: 'Address'
  };

  export type PremiseScalarFieldEnum = (typeof PremiseScalarFieldEnum)[keyof typeof PremiseScalarFieldEnum]


  export const RentalScalarFieldEnum: {
    ID: 'ID',
    ID_premise: 'ID_premise',
    ID_tenant: 'ID_tenant',
    Status: 'Status',
    StartDate: 'StartDate'
  };

  export type RentalScalarFieldEnum = (typeof RentalScalarFieldEnum)[keyof typeof RentalScalarFieldEnum]


  export const CharacteristicScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name'
  };

  export type CharacteristicScalarFieldEnum = (typeof CharacteristicScalarFieldEnum)[keyof typeof CharacteristicScalarFieldEnum]


  export const DescriptionCharacteristicScalarFieldEnum: {
    ID: 'ID',
    ID_characteristic: 'ID_characteristic',
    ID_premise: 'ID_premise',
    Description: 'Description'
  };

  export type DescriptionCharacteristicScalarFieldEnum = (typeof DescriptionCharacteristicScalarFieldEnum)[keyof typeof DescriptionCharacteristicScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    ID?: IntFilter<"User"> | number
    Login?: StringFilter<"User"> | string
    Password?: StringFilter<"User"> | string
    Role?: IntFilter<"User"> | number
    Name?: StringNullableFilter<"User"> | string | null
    Surname?: StringNullableFilter<"User"> | string | null
    PhoneNumber?: StringNullableFilter<"User"> | string | null
    Photo?: BytesNullableFilter<"User"> | Buffer | null
    PremiseRef?: PremiseListRelationFilter
    RentalRef?: RentalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    ID?: SortOrder
    Login?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Name?: SortOrderInput | SortOrder
    Surname?: SortOrderInput | SortOrder
    PhoneNumber?: SortOrderInput | SortOrder
    Photo?: SortOrderInput | SortOrder
    PremiseRef?: PremiseOrderByRelationAggregateInput
    RentalRef?: RentalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    Login?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    Password?: StringFilter<"User"> | string
    Role?: IntFilter<"User"> | number
    Name?: StringNullableFilter<"User"> | string | null
    Surname?: StringNullableFilter<"User"> | string | null
    PhoneNumber?: StringNullableFilter<"User"> | string | null
    Photo?: BytesNullableFilter<"User"> | Buffer | null
    PremiseRef?: PremiseListRelationFilter
    RentalRef?: RentalListRelationFilter
  }, "ID" | "Login">

  export type UserOrderByWithAggregationInput = {
    ID?: SortOrder
    Login?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Name?: SortOrderInput | SortOrder
    Surname?: SortOrderInput | SortOrder
    PhoneNumber?: SortOrderInput | SortOrder
    Photo?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"User"> | number
    Login?: StringWithAggregatesFilter<"User"> | string
    Password?: StringWithAggregatesFilter<"User"> | string
    Role?: IntWithAggregatesFilter<"User"> | number
    Name?: StringNullableWithAggregatesFilter<"User"> | string | null
    Surname?: StringNullableWithAggregatesFilter<"User"> | string | null
    PhoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    Photo?: BytesNullableWithAggregatesFilter<"User"> | Buffer | null
  }

  export type TypePremisesWhereInput = {
    AND?: TypePremisesWhereInput | TypePremisesWhereInput[]
    OR?: TypePremisesWhereInput[]
    NOT?: TypePremisesWhereInput | TypePremisesWhereInput[]
    ID?: IntFilter<"TypePremises"> | number
    Name?: StringFilter<"TypePremises"> | string
    PremiseRef?: PremiseListRelationFilter
    Characteristic?: CharacteristicListRelationFilter
  }

  export type TypePremisesOrderByWithRelationInput = {
    ID?: SortOrder
    Name?: SortOrder
    PremiseRef?: PremiseOrderByRelationAggregateInput
    Characteristic?: CharacteristicOrderByRelationAggregateInput
  }

  export type TypePremisesWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    Name?: string
    AND?: TypePremisesWhereInput | TypePremisesWhereInput[]
    OR?: TypePremisesWhereInput[]
    NOT?: TypePremisesWhereInput | TypePremisesWhereInput[]
    PremiseRef?: PremiseListRelationFilter
    Characteristic?: CharacteristicListRelationFilter
  }, "ID" | "Name">

  export type TypePremisesOrderByWithAggregationInput = {
    ID?: SortOrder
    Name?: SortOrder
    _count?: TypePremisesCountOrderByAggregateInput
    _avg?: TypePremisesAvgOrderByAggregateInput
    _max?: TypePremisesMaxOrderByAggregateInput
    _min?: TypePremisesMinOrderByAggregateInput
    _sum?: TypePremisesSumOrderByAggregateInput
  }

  export type TypePremisesScalarWhereWithAggregatesInput = {
    AND?: TypePremisesScalarWhereWithAggregatesInput | TypePremisesScalarWhereWithAggregatesInput[]
    OR?: TypePremisesScalarWhereWithAggregatesInput[]
    NOT?: TypePremisesScalarWhereWithAggregatesInput | TypePremisesScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"TypePremises"> | number
    Name?: StringWithAggregatesFilter<"TypePremises"> | string
  }

  export type PremiseWhereInput = {
    AND?: PremiseWhereInput | PremiseWhereInput[]
    OR?: PremiseWhereInput[]
    NOT?: PremiseWhereInput | PremiseWhereInput[]
    ID?: IntFilter<"Premise"> | number
    ID_type?: IntFilter<"Premise"> | number
    ID_owner?: IntFilter<"Premise"> | number
    Name?: StringFilter<"Premise"> | string
    Image?: BytesNullableFilter<"Premise"> | Buffer | null
    Price?: FloatFilter<"Premise"> | number
    Address?: StringFilter<"Premise"> | string
    RentalRef?: RentalListRelationFilter
    TypePremises?: XOR<TypePremisesRelationFilter, TypePremisesWhereInput>
    Owner?: XOR<UserRelationFilter, UserWhereInput>
    DescriptionCharacteristicRef?: DescriptionCharacteristicListRelationFilter
  }

  export type PremiseOrderByWithRelationInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Name?: SortOrder
    Image?: SortOrderInput | SortOrder
    Price?: SortOrder
    Address?: SortOrder
    RentalRef?: RentalOrderByRelationAggregateInput
    TypePremises?: TypePremisesOrderByWithRelationInput
    Owner?: UserOrderByWithRelationInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicOrderByRelationAggregateInput
  }

  export type PremiseWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: PremiseWhereInput | PremiseWhereInput[]
    OR?: PremiseWhereInput[]
    NOT?: PremiseWhereInput | PremiseWhereInput[]
    ID_type?: IntFilter<"Premise"> | number
    ID_owner?: IntFilter<"Premise"> | number
    Name?: StringFilter<"Premise"> | string
    Image?: BytesNullableFilter<"Premise"> | Buffer | null
    Price?: FloatFilter<"Premise"> | number
    Address?: StringFilter<"Premise"> | string
    RentalRef?: RentalListRelationFilter
    TypePremises?: XOR<TypePremisesRelationFilter, TypePremisesWhereInput>
    Owner?: XOR<UserRelationFilter, UserWhereInput>
    DescriptionCharacteristicRef?: DescriptionCharacteristicListRelationFilter
  }, "ID">

  export type PremiseOrderByWithAggregationInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Name?: SortOrder
    Image?: SortOrderInput | SortOrder
    Price?: SortOrder
    Address?: SortOrder
    _count?: PremiseCountOrderByAggregateInput
    _avg?: PremiseAvgOrderByAggregateInput
    _max?: PremiseMaxOrderByAggregateInput
    _min?: PremiseMinOrderByAggregateInput
    _sum?: PremiseSumOrderByAggregateInput
  }

  export type PremiseScalarWhereWithAggregatesInput = {
    AND?: PremiseScalarWhereWithAggregatesInput | PremiseScalarWhereWithAggregatesInput[]
    OR?: PremiseScalarWhereWithAggregatesInput[]
    NOT?: PremiseScalarWhereWithAggregatesInput | PremiseScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"Premise"> | number
    ID_type?: IntWithAggregatesFilter<"Premise"> | number
    ID_owner?: IntWithAggregatesFilter<"Premise"> | number
    Name?: StringWithAggregatesFilter<"Premise"> | string
    Image?: BytesNullableWithAggregatesFilter<"Premise"> | Buffer | null
    Price?: FloatWithAggregatesFilter<"Premise"> | number
    Address?: StringWithAggregatesFilter<"Premise"> | string
  }

  export type RentalWhereInput = {
    AND?: RentalWhereInput | RentalWhereInput[]
    OR?: RentalWhereInput[]
    NOT?: RentalWhereInput | RentalWhereInput[]
    ID?: IntFilter<"Rental"> | number
    ID_premise?: IntFilter<"Rental"> | number
    ID_tenant?: IntFilter<"Rental"> | number
    Status?: IntFilter<"Rental"> | number
    StartDate?: DateTimeNullableFilter<"Rental"> | Date | string | null
    Premise?: XOR<PremiseRelationFilter, PremiseWhereInput>
    Tenant?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RentalOrderByWithRelationInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
    StartDate?: SortOrderInput | SortOrder
    Premise?: PremiseOrderByWithRelationInput
    Tenant?: UserOrderByWithRelationInput
  }

  export type RentalWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: RentalWhereInput | RentalWhereInput[]
    OR?: RentalWhereInput[]
    NOT?: RentalWhereInput | RentalWhereInput[]
    ID_premise?: IntFilter<"Rental"> | number
    ID_tenant?: IntFilter<"Rental"> | number
    Status?: IntFilter<"Rental"> | number
    StartDate?: DateTimeNullableFilter<"Rental"> | Date | string | null
    Premise?: XOR<PremiseRelationFilter, PremiseWhereInput>
    Tenant?: XOR<UserRelationFilter, UserWhereInput>
  }, "ID">

  export type RentalOrderByWithAggregationInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
    StartDate?: SortOrderInput | SortOrder
    _count?: RentalCountOrderByAggregateInput
    _avg?: RentalAvgOrderByAggregateInput
    _max?: RentalMaxOrderByAggregateInput
    _min?: RentalMinOrderByAggregateInput
    _sum?: RentalSumOrderByAggregateInput
  }

  export type RentalScalarWhereWithAggregatesInput = {
    AND?: RentalScalarWhereWithAggregatesInput | RentalScalarWhereWithAggregatesInput[]
    OR?: RentalScalarWhereWithAggregatesInput[]
    NOT?: RentalScalarWhereWithAggregatesInput | RentalScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"Rental"> | number
    ID_premise?: IntWithAggregatesFilter<"Rental"> | number
    ID_tenant?: IntWithAggregatesFilter<"Rental"> | number
    Status?: IntWithAggregatesFilter<"Rental"> | number
    StartDate?: DateTimeNullableWithAggregatesFilter<"Rental"> | Date | string | null
  }

  export type CharacteristicWhereInput = {
    AND?: CharacteristicWhereInput | CharacteristicWhereInput[]
    OR?: CharacteristicWhereInput[]
    NOT?: CharacteristicWhereInput | CharacteristicWhereInput[]
    ID?: IntFilter<"Characteristic"> | number
    Name?: StringFilter<"Characteristic"> | string
    TypePremises?: TypePremisesListRelationFilter
    DescriptionCharacteristicRef?: DescriptionCharacteristicListRelationFilter
  }

  export type CharacteristicOrderByWithRelationInput = {
    ID?: SortOrder
    Name?: SortOrder
    TypePremises?: TypePremisesOrderByRelationAggregateInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicOrderByRelationAggregateInput
  }

  export type CharacteristicWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    Name?: string
    AND?: CharacteristicWhereInput | CharacteristicWhereInput[]
    OR?: CharacteristicWhereInput[]
    NOT?: CharacteristicWhereInput | CharacteristicWhereInput[]
    TypePremises?: TypePremisesListRelationFilter
    DescriptionCharacteristicRef?: DescriptionCharacteristicListRelationFilter
  }, "ID" | "Name">

  export type CharacteristicOrderByWithAggregationInput = {
    ID?: SortOrder
    Name?: SortOrder
    _count?: CharacteristicCountOrderByAggregateInput
    _avg?: CharacteristicAvgOrderByAggregateInput
    _max?: CharacteristicMaxOrderByAggregateInput
    _min?: CharacteristicMinOrderByAggregateInput
    _sum?: CharacteristicSumOrderByAggregateInput
  }

  export type CharacteristicScalarWhereWithAggregatesInput = {
    AND?: CharacteristicScalarWhereWithAggregatesInput | CharacteristicScalarWhereWithAggregatesInput[]
    OR?: CharacteristicScalarWhereWithAggregatesInput[]
    NOT?: CharacteristicScalarWhereWithAggregatesInput | CharacteristicScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"Characteristic"> | number
    Name?: StringWithAggregatesFilter<"Characteristic"> | string
  }

  export type DescriptionCharacteristicWhereInput = {
    AND?: DescriptionCharacteristicWhereInput | DescriptionCharacteristicWhereInput[]
    OR?: DescriptionCharacteristicWhereInput[]
    NOT?: DescriptionCharacteristicWhereInput | DescriptionCharacteristicWhereInput[]
    ID?: IntFilter<"DescriptionCharacteristic"> | number
    ID_characteristic?: IntFilter<"DescriptionCharacteristic"> | number
    ID_premise?: IntFilter<"DescriptionCharacteristic"> | number
    Description?: StringFilter<"DescriptionCharacteristic"> | string
    Characteristic?: XOR<CharacteristicRelationFilter, CharacteristicWhereInput>
    Premise?: XOR<PremiseRelationFilter, PremiseWhereInput>
  }

  export type DescriptionCharacteristicOrderByWithRelationInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
    Description?: SortOrder
    Characteristic?: CharacteristicOrderByWithRelationInput
    Premise?: PremiseOrderByWithRelationInput
  }

  export type DescriptionCharacteristicWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: DescriptionCharacteristicWhereInput | DescriptionCharacteristicWhereInput[]
    OR?: DescriptionCharacteristicWhereInput[]
    NOT?: DescriptionCharacteristicWhereInput | DescriptionCharacteristicWhereInput[]
    ID_characteristic?: IntFilter<"DescriptionCharacteristic"> | number
    ID_premise?: IntFilter<"DescriptionCharacteristic"> | number
    Description?: StringFilter<"DescriptionCharacteristic"> | string
    Characteristic?: XOR<CharacteristicRelationFilter, CharacteristicWhereInput>
    Premise?: XOR<PremiseRelationFilter, PremiseWhereInput>
  }, "ID">

  export type DescriptionCharacteristicOrderByWithAggregationInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
    Description?: SortOrder
    _count?: DescriptionCharacteristicCountOrderByAggregateInput
    _avg?: DescriptionCharacteristicAvgOrderByAggregateInput
    _max?: DescriptionCharacteristicMaxOrderByAggregateInput
    _min?: DescriptionCharacteristicMinOrderByAggregateInput
    _sum?: DescriptionCharacteristicSumOrderByAggregateInput
  }

  export type DescriptionCharacteristicScalarWhereWithAggregatesInput = {
    AND?: DescriptionCharacteristicScalarWhereWithAggregatesInput | DescriptionCharacteristicScalarWhereWithAggregatesInput[]
    OR?: DescriptionCharacteristicScalarWhereWithAggregatesInput[]
    NOT?: DescriptionCharacteristicScalarWhereWithAggregatesInput | DescriptionCharacteristicScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"DescriptionCharacteristic"> | number
    ID_characteristic?: IntWithAggregatesFilter<"DescriptionCharacteristic"> | number
    ID_premise?: IntWithAggregatesFilter<"DescriptionCharacteristic"> | number
    Description?: StringWithAggregatesFilter<"DescriptionCharacteristic"> | string
  }

  export type UserCreateInput = {
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    PremiseRef?: PremiseCreateNestedManyWithoutOwnerInput
    RentalRef?: RentalCreateNestedManyWithoutTenantInput
  }

  export type UserUncheckedCreateInput = {
    ID?: number
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    PremiseRef?: PremiseUncheckedCreateNestedManyWithoutOwnerInput
    RentalRef?: RentalUncheckedCreateNestedManyWithoutTenantInput
  }

  export type UserUpdateInput = {
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    PremiseRef?: PremiseUpdateManyWithoutOwnerNestedInput
    RentalRef?: RentalUpdateManyWithoutTenantNestedInput
  }

  export type UserUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    PremiseRef?: PremiseUncheckedUpdateManyWithoutOwnerNestedInput
    RentalRef?: RentalUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateManyInput = {
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
  }

  export type UserUpdateManyMutationInput = {
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type UserUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
  }

  export type TypePremisesCreateInput = {
    Name: string
    PremiseRef?: PremiseCreateNestedManyWithoutTypePremisesInput
    Characteristic?: CharacteristicCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesUncheckedCreateInput = {
    ID?: number
    Name: string
    PremiseRef?: PremiseUncheckedCreateNestedManyWithoutTypePremisesInput
    Characteristic?: CharacteristicUncheckedCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PremiseRef?: PremiseUpdateManyWithoutTypePremisesNestedInput
    Characteristic?: CharacteristicUpdateManyWithoutTypePremisesNestedInput
  }

  export type TypePremisesUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PremiseRef?: PremiseUncheckedUpdateManyWithoutTypePremisesNestedInput
    Characteristic?: CharacteristicUncheckedUpdateManyWithoutTypePremisesNestedInput
  }

  export type TypePremisesCreateManyInput = {
    Name: string
  }

  export type TypePremisesUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type TypePremisesUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type PremiseCreateInput = {
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalCreateNestedManyWithoutPremiseInput
    TypePremises: TypePremisesCreateNestedOneWithoutPremiseRefInput
    Owner: UserCreateNestedOneWithoutPremiseRefInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutPremiseInput
  }

  export type PremiseUncheckedCreateInput = {
    ID?: number
    ID_type: number
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalUncheckedCreateNestedManyWithoutPremiseInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutPremiseInput
  }

  export type PremiseUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUpdateManyWithoutPremiseNestedInput
    TypePremises?: TypePremisesUpdateOneRequiredWithoutPremiseRefNestedInput
    Owner?: UserUpdateOneRequiredWithoutPremiseRefNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUncheckedUpdateManyWithoutPremiseNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseCreateManyInput = {
    ID_type: number
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
  }

  export type PremiseUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type PremiseUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type RentalCreateInput = {
    Status?: number
    StartDate?: Date | string | null
    Premise: PremiseCreateNestedOneWithoutRentalRefInput
    Tenant: UserCreateNestedOneWithoutRentalRefInput
  }

  export type RentalUncheckedCreateInput = {
    ID?: number
    ID_premise: number
    ID_tenant: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type RentalUpdateInput = {
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Premise?: PremiseUpdateOneRequiredWithoutRentalRefNestedInput
    Tenant?: UserUpdateOneRequiredWithoutRentalRefNestedInput
  }

  export type RentalUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    ID_tenant?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentalCreateManyInput = {
    ID_premise: number
    ID_tenant: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type RentalUpdateManyMutationInput = {
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentalUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    ID_tenant?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CharacteristicCreateInput = {
    Name: string
    TypePremises?: TypePremisesCreateNestedManyWithoutCharacteristicInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicUncheckedCreateInput = {
    ID?: number
    Name: string
    TypePremises?: TypePremisesUncheckedCreateNestedManyWithoutCharacteristicInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    TypePremises?: TypePremisesUpdateManyWithoutCharacteristicNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutCharacteristicNestedInput
  }

  export type CharacteristicUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    TypePremises?: TypePremisesUncheckedUpdateManyWithoutCharacteristicNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutCharacteristicNestedInput
  }

  export type CharacteristicCreateManyInput = {
    Name: string
  }

  export type CharacteristicUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type CharacteristicUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicCreateInput = {
    Description: string
    Characteristic: CharacteristicCreateNestedOneWithoutDescriptionCharacteristicRefInput
    Premise: PremiseCreateNestedOneWithoutDescriptionCharacteristicRefInput
  }

  export type DescriptionCharacteristicUncheckedCreateInput = {
    ID?: number
    ID_characteristic: number
    ID_premise: number
    Description: string
  }

  export type DescriptionCharacteristicUpdateInput = {
    Description?: StringFieldUpdateOperationsInput | string
    Characteristic?: CharacteristicUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput
    Premise?: PremiseUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput
  }

  export type DescriptionCharacteristicUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_characteristic?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicCreateManyInput = {
    ID_characteristic: number
    ID_premise: number
    Description: string
  }

  export type DescriptionCharacteristicUpdateManyMutationInput = {
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_characteristic?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type PremiseListRelationFilter = {
    every?: PremiseWhereInput
    some?: PremiseWhereInput
    none?: PremiseWhereInput
  }

  export type RentalListRelationFilter = {
    every?: RentalWhereInput
    some?: RentalWhereInput
    none?: RentalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PremiseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RentalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    ID?: SortOrder
    Login?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Name?: SortOrder
    Surname?: SortOrder
    PhoneNumber?: SortOrder
    Photo?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    ID?: SortOrder
    Role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    ID?: SortOrder
    Login?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Name?: SortOrder
    Surname?: SortOrder
    PhoneNumber?: SortOrder
    Photo?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    ID?: SortOrder
    Login?: SortOrder
    Password?: SortOrder
    Role?: SortOrder
    Name?: SortOrder
    Surname?: SortOrder
    PhoneNumber?: SortOrder
    Photo?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    ID?: SortOrder
    Role?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type CharacteristicListRelationFilter = {
    every?: CharacteristicWhereInput
    some?: CharacteristicWhereInput
    none?: CharacteristicWhereInput
  }

  export type CharacteristicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TypePremisesCountOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type TypePremisesAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type TypePremisesMaxOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type TypePremisesMinOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type TypePremisesSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TypePremisesRelationFilter = {
    is?: TypePremisesWhereInput
    isNot?: TypePremisesWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DescriptionCharacteristicListRelationFilter = {
    every?: DescriptionCharacteristicWhereInput
    some?: DescriptionCharacteristicWhereInput
    none?: DescriptionCharacteristicWhereInput
  }

  export type DescriptionCharacteristicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PremiseCountOrderByAggregateInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Name?: SortOrder
    Image?: SortOrder
    Price?: SortOrder
    Address?: SortOrder
  }

  export type PremiseAvgOrderByAggregateInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Price?: SortOrder
  }

  export type PremiseMaxOrderByAggregateInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Name?: SortOrder
    Image?: SortOrder
    Price?: SortOrder
    Address?: SortOrder
  }

  export type PremiseMinOrderByAggregateInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Name?: SortOrder
    Image?: SortOrder
    Price?: SortOrder
    Address?: SortOrder
  }

  export type PremiseSumOrderByAggregateInput = {
    ID?: SortOrder
    ID_type?: SortOrder
    ID_owner?: SortOrder
    Price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PremiseRelationFilter = {
    is?: PremiseWhereInput
    isNot?: PremiseWhereInput
  }

  export type RentalCountOrderByAggregateInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
    StartDate?: SortOrder
  }

  export type RentalAvgOrderByAggregateInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
  }

  export type RentalMaxOrderByAggregateInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
    StartDate?: SortOrder
  }

  export type RentalMinOrderByAggregateInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
    StartDate?: SortOrder
  }

  export type RentalSumOrderByAggregateInput = {
    ID?: SortOrder
    ID_premise?: SortOrder
    ID_tenant?: SortOrder
    Status?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TypePremisesListRelationFilter = {
    every?: TypePremisesWhereInput
    some?: TypePremisesWhereInput
    none?: TypePremisesWhereInput
  }

  export type TypePremisesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacteristicCountOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type CharacteristicAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type CharacteristicMaxOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type CharacteristicMinOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
  }

  export type CharacteristicSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type CharacteristicRelationFilter = {
    is?: CharacteristicWhereInput
    isNot?: CharacteristicWhereInput
  }

  export type DescriptionCharacteristicCountOrderByAggregateInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
    Description?: SortOrder
  }

  export type DescriptionCharacteristicAvgOrderByAggregateInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
  }

  export type DescriptionCharacteristicMaxOrderByAggregateInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
    Description?: SortOrder
  }

  export type DescriptionCharacteristicMinOrderByAggregateInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
    Description?: SortOrder
  }

  export type DescriptionCharacteristicSumOrderByAggregateInput = {
    ID?: SortOrder
    ID_characteristic?: SortOrder
    ID_premise?: SortOrder
  }

  export type PremiseCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput> | PremiseCreateWithoutOwnerInput[] | PremiseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutOwnerInput | PremiseCreateOrConnectWithoutOwnerInput[]
    createMany?: PremiseCreateManyOwnerInputEnvelope
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
  }

  export type RentalCreateNestedManyWithoutTenantInput = {
    create?: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput> | RentalCreateWithoutTenantInput[] | RentalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutTenantInput | RentalCreateOrConnectWithoutTenantInput[]
    createMany?: RentalCreateManyTenantInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type PremiseUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput> | PremiseCreateWithoutOwnerInput[] | PremiseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutOwnerInput | PremiseCreateOrConnectWithoutOwnerInput[]
    createMany?: PremiseCreateManyOwnerInputEnvelope
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput> | RentalCreateWithoutTenantInput[] | RentalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutTenantInput | RentalCreateOrConnectWithoutTenantInput[]
    createMany?: RentalCreateManyTenantInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Buffer | null
  }

  export type PremiseUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput> | PremiseCreateWithoutOwnerInput[] | PremiseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutOwnerInput | PremiseCreateOrConnectWithoutOwnerInput[]
    upsert?: PremiseUpsertWithWhereUniqueWithoutOwnerInput | PremiseUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PremiseCreateManyOwnerInputEnvelope
    set?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    disconnect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    delete?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    update?: PremiseUpdateWithWhereUniqueWithoutOwnerInput | PremiseUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PremiseUpdateManyWithWhereWithoutOwnerInput | PremiseUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
  }

  export type RentalUpdateManyWithoutTenantNestedInput = {
    create?: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput> | RentalCreateWithoutTenantInput[] | RentalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutTenantInput | RentalCreateOrConnectWithoutTenantInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutTenantInput | RentalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: RentalCreateManyTenantInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutTenantInput | RentalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutTenantInput | RentalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type PremiseUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput> | PremiseCreateWithoutOwnerInput[] | PremiseUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutOwnerInput | PremiseCreateOrConnectWithoutOwnerInput[]
    upsert?: PremiseUpsertWithWhereUniqueWithoutOwnerInput | PremiseUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: PremiseCreateManyOwnerInputEnvelope
    set?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    disconnect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    delete?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    update?: PremiseUpdateWithWhereUniqueWithoutOwnerInput | PremiseUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: PremiseUpdateManyWithWhereWithoutOwnerInput | PremiseUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput> | RentalCreateWithoutTenantInput[] | RentalUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutTenantInput | RentalCreateOrConnectWithoutTenantInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutTenantInput | RentalUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: RentalCreateManyTenantInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutTenantInput | RentalUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutTenantInput | RentalUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type PremiseCreateNestedManyWithoutTypePremisesInput = {
    create?: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput> | PremiseCreateWithoutTypePremisesInput[] | PremiseUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutTypePremisesInput | PremiseCreateOrConnectWithoutTypePremisesInput[]
    createMany?: PremiseCreateManyTypePremisesInputEnvelope
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
  }

  export type CharacteristicCreateNestedManyWithoutTypePremisesInput = {
    create?: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput> | CharacteristicCreateWithoutTypePremisesInput[] | CharacteristicUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: CharacteristicCreateOrConnectWithoutTypePremisesInput | CharacteristicCreateOrConnectWithoutTypePremisesInput[]
    connect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
  }

  export type PremiseUncheckedCreateNestedManyWithoutTypePremisesInput = {
    create?: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput> | PremiseCreateWithoutTypePremisesInput[] | PremiseUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutTypePremisesInput | PremiseCreateOrConnectWithoutTypePremisesInput[]
    createMany?: PremiseCreateManyTypePremisesInputEnvelope
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
  }

  export type CharacteristicUncheckedCreateNestedManyWithoutTypePremisesInput = {
    create?: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput> | CharacteristicCreateWithoutTypePremisesInput[] | CharacteristicUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: CharacteristicCreateOrConnectWithoutTypePremisesInput | CharacteristicCreateOrConnectWithoutTypePremisesInput[]
    connect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
  }

  export type PremiseUpdateManyWithoutTypePremisesNestedInput = {
    create?: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput> | PremiseCreateWithoutTypePremisesInput[] | PremiseUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutTypePremisesInput | PremiseCreateOrConnectWithoutTypePremisesInput[]
    upsert?: PremiseUpsertWithWhereUniqueWithoutTypePremisesInput | PremiseUpsertWithWhereUniqueWithoutTypePremisesInput[]
    createMany?: PremiseCreateManyTypePremisesInputEnvelope
    set?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    disconnect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    delete?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    update?: PremiseUpdateWithWhereUniqueWithoutTypePremisesInput | PremiseUpdateWithWhereUniqueWithoutTypePremisesInput[]
    updateMany?: PremiseUpdateManyWithWhereWithoutTypePremisesInput | PremiseUpdateManyWithWhereWithoutTypePremisesInput[]
    deleteMany?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
  }

  export type CharacteristicUpdateManyWithoutTypePremisesNestedInput = {
    create?: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput> | CharacteristicCreateWithoutTypePremisesInput[] | CharacteristicUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: CharacteristicCreateOrConnectWithoutTypePremisesInput | CharacteristicCreateOrConnectWithoutTypePremisesInput[]
    upsert?: CharacteristicUpsertWithWhereUniqueWithoutTypePremisesInput | CharacteristicUpsertWithWhereUniqueWithoutTypePremisesInput[]
    set?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    disconnect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    delete?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    connect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    update?: CharacteristicUpdateWithWhereUniqueWithoutTypePremisesInput | CharacteristicUpdateWithWhereUniqueWithoutTypePremisesInput[]
    updateMany?: CharacteristicUpdateManyWithWhereWithoutTypePremisesInput | CharacteristicUpdateManyWithWhereWithoutTypePremisesInput[]
    deleteMany?: CharacteristicScalarWhereInput | CharacteristicScalarWhereInput[]
  }

  export type PremiseUncheckedUpdateManyWithoutTypePremisesNestedInput = {
    create?: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput> | PremiseCreateWithoutTypePremisesInput[] | PremiseUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: PremiseCreateOrConnectWithoutTypePremisesInput | PremiseCreateOrConnectWithoutTypePremisesInput[]
    upsert?: PremiseUpsertWithWhereUniqueWithoutTypePremisesInput | PremiseUpsertWithWhereUniqueWithoutTypePremisesInput[]
    createMany?: PremiseCreateManyTypePremisesInputEnvelope
    set?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    disconnect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    delete?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    connect?: PremiseWhereUniqueInput | PremiseWhereUniqueInput[]
    update?: PremiseUpdateWithWhereUniqueWithoutTypePremisesInput | PremiseUpdateWithWhereUniqueWithoutTypePremisesInput[]
    updateMany?: PremiseUpdateManyWithWhereWithoutTypePremisesInput | PremiseUpdateManyWithWhereWithoutTypePremisesInput[]
    deleteMany?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
  }

  export type CharacteristicUncheckedUpdateManyWithoutTypePremisesNestedInput = {
    create?: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput> | CharacteristicCreateWithoutTypePremisesInput[] | CharacteristicUncheckedCreateWithoutTypePremisesInput[]
    connectOrCreate?: CharacteristicCreateOrConnectWithoutTypePremisesInput | CharacteristicCreateOrConnectWithoutTypePremisesInput[]
    upsert?: CharacteristicUpsertWithWhereUniqueWithoutTypePremisesInput | CharacteristicUpsertWithWhereUniqueWithoutTypePremisesInput[]
    set?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    disconnect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    delete?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    connect?: CharacteristicWhereUniqueInput | CharacteristicWhereUniqueInput[]
    update?: CharacteristicUpdateWithWhereUniqueWithoutTypePremisesInput | CharacteristicUpdateWithWhereUniqueWithoutTypePremisesInput[]
    updateMany?: CharacteristicUpdateManyWithWhereWithoutTypePremisesInput | CharacteristicUpdateManyWithWhereWithoutTypePremisesInput[]
    deleteMany?: CharacteristicScalarWhereInput | CharacteristicScalarWhereInput[]
  }

  export type RentalCreateNestedManyWithoutPremiseInput = {
    create?: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput> | RentalCreateWithoutPremiseInput[] | RentalUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutPremiseInput | RentalCreateOrConnectWithoutPremiseInput[]
    createMany?: RentalCreateManyPremiseInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type TypePremisesCreateNestedOneWithoutPremiseRefInput = {
    create?: XOR<TypePremisesCreateWithoutPremiseRefInput, TypePremisesUncheckedCreateWithoutPremiseRefInput>
    connectOrCreate?: TypePremisesCreateOrConnectWithoutPremiseRefInput
    connect?: TypePremisesWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPremiseRefInput = {
    create?: XOR<UserCreateWithoutPremiseRefInput, UserUncheckedCreateWithoutPremiseRefInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiseRefInput
    connect?: UserWhereUniqueInput
  }

  export type DescriptionCharacteristicCreateNestedManyWithoutPremiseInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput> | DescriptionCharacteristicCreateWithoutPremiseInput[] | DescriptionCharacteristicUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutPremiseInput | DescriptionCharacteristicCreateOrConnectWithoutPremiseInput[]
    createMany?: DescriptionCharacteristicCreateManyPremiseInputEnvelope
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
  }

  export type RentalUncheckedCreateNestedManyWithoutPremiseInput = {
    create?: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput> | RentalCreateWithoutPremiseInput[] | RentalUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutPremiseInput | RentalCreateOrConnectWithoutPremiseInput[]
    createMany?: RentalCreateManyPremiseInputEnvelope
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
  }

  export type DescriptionCharacteristicUncheckedCreateNestedManyWithoutPremiseInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput> | DescriptionCharacteristicCreateWithoutPremiseInput[] | DescriptionCharacteristicUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutPremiseInput | DescriptionCharacteristicCreateOrConnectWithoutPremiseInput[]
    createMany?: DescriptionCharacteristicCreateManyPremiseInputEnvelope
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RentalUpdateManyWithoutPremiseNestedInput = {
    create?: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput> | RentalCreateWithoutPremiseInput[] | RentalUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutPremiseInput | RentalCreateOrConnectWithoutPremiseInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutPremiseInput | RentalUpsertWithWhereUniqueWithoutPremiseInput[]
    createMany?: RentalCreateManyPremiseInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutPremiseInput | RentalUpdateWithWhereUniqueWithoutPremiseInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutPremiseInput | RentalUpdateManyWithWhereWithoutPremiseInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type TypePremisesUpdateOneRequiredWithoutPremiseRefNestedInput = {
    create?: XOR<TypePremisesCreateWithoutPremiseRefInput, TypePremisesUncheckedCreateWithoutPremiseRefInput>
    connectOrCreate?: TypePremisesCreateOrConnectWithoutPremiseRefInput
    upsert?: TypePremisesUpsertWithoutPremiseRefInput
    connect?: TypePremisesWhereUniqueInput
    update?: XOR<XOR<TypePremisesUpdateToOneWithWhereWithoutPremiseRefInput, TypePremisesUpdateWithoutPremiseRefInput>, TypePremisesUncheckedUpdateWithoutPremiseRefInput>
  }

  export type UserUpdateOneRequiredWithoutPremiseRefNestedInput = {
    create?: XOR<UserCreateWithoutPremiseRefInput, UserUncheckedCreateWithoutPremiseRefInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiseRefInput
    upsert?: UserUpsertWithoutPremiseRefInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPremiseRefInput, UserUpdateWithoutPremiseRefInput>, UserUncheckedUpdateWithoutPremiseRefInput>
  }

  export type DescriptionCharacteristicUpdateManyWithoutPremiseNestedInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput> | DescriptionCharacteristicCreateWithoutPremiseInput[] | DescriptionCharacteristicUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutPremiseInput | DescriptionCharacteristicCreateOrConnectWithoutPremiseInput[]
    upsert?: DescriptionCharacteristicUpsertWithWhereUniqueWithoutPremiseInput | DescriptionCharacteristicUpsertWithWhereUniqueWithoutPremiseInput[]
    createMany?: DescriptionCharacteristicCreateManyPremiseInputEnvelope
    set?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    disconnect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    delete?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    update?: DescriptionCharacteristicUpdateWithWhereUniqueWithoutPremiseInput | DescriptionCharacteristicUpdateWithWhereUniqueWithoutPremiseInput[]
    updateMany?: DescriptionCharacteristicUpdateManyWithWhereWithoutPremiseInput | DescriptionCharacteristicUpdateManyWithWhereWithoutPremiseInput[]
    deleteMany?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
  }

  export type RentalUncheckedUpdateManyWithoutPremiseNestedInput = {
    create?: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput> | RentalCreateWithoutPremiseInput[] | RentalUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: RentalCreateOrConnectWithoutPremiseInput | RentalCreateOrConnectWithoutPremiseInput[]
    upsert?: RentalUpsertWithWhereUniqueWithoutPremiseInput | RentalUpsertWithWhereUniqueWithoutPremiseInput[]
    createMany?: RentalCreateManyPremiseInputEnvelope
    set?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    disconnect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    delete?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    connect?: RentalWhereUniqueInput | RentalWhereUniqueInput[]
    update?: RentalUpdateWithWhereUniqueWithoutPremiseInput | RentalUpdateWithWhereUniqueWithoutPremiseInput[]
    updateMany?: RentalUpdateManyWithWhereWithoutPremiseInput | RentalUpdateManyWithWhereWithoutPremiseInput[]
    deleteMany?: RentalScalarWhereInput | RentalScalarWhereInput[]
  }

  export type DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseNestedInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput> | DescriptionCharacteristicCreateWithoutPremiseInput[] | DescriptionCharacteristicUncheckedCreateWithoutPremiseInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutPremiseInput | DescriptionCharacteristicCreateOrConnectWithoutPremiseInput[]
    upsert?: DescriptionCharacteristicUpsertWithWhereUniqueWithoutPremiseInput | DescriptionCharacteristicUpsertWithWhereUniqueWithoutPremiseInput[]
    createMany?: DescriptionCharacteristicCreateManyPremiseInputEnvelope
    set?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    disconnect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    delete?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    update?: DescriptionCharacteristicUpdateWithWhereUniqueWithoutPremiseInput | DescriptionCharacteristicUpdateWithWhereUniqueWithoutPremiseInput[]
    updateMany?: DescriptionCharacteristicUpdateManyWithWhereWithoutPremiseInput | DescriptionCharacteristicUpdateManyWithWhereWithoutPremiseInput[]
    deleteMany?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
  }

  export type PremiseCreateNestedOneWithoutRentalRefInput = {
    create?: XOR<PremiseCreateWithoutRentalRefInput, PremiseUncheckedCreateWithoutRentalRefInput>
    connectOrCreate?: PremiseCreateOrConnectWithoutRentalRefInput
    connect?: PremiseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRentalRefInput = {
    create?: XOR<UserCreateWithoutRentalRefInput, UserUncheckedCreateWithoutRentalRefInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentalRefInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PremiseUpdateOneRequiredWithoutRentalRefNestedInput = {
    create?: XOR<PremiseCreateWithoutRentalRefInput, PremiseUncheckedCreateWithoutRentalRefInput>
    connectOrCreate?: PremiseCreateOrConnectWithoutRentalRefInput
    upsert?: PremiseUpsertWithoutRentalRefInput
    connect?: PremiseWhereUniqueInput
    update?: XOR<XOR<PremiseUpdateToOneWithWhereWithoutRentalRefInput, PremiseUpdateWithoutRentalRefInput>, PremiseUncheckedUpdateWithoutRentalRefInput>
  }

  export type UserUpdateOneRequiredWithoutRentalRefNestedInput = {
    create?: XOR<UserCreateWithoutRentalRefInput, UserUncheckedCreateWithoutRentalRefInput>
    connectOrCreate?: UserCreateOrConnectWithoutRentalRefInput
    upsert?: UserUpsertWithoutRentalRefInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRentalRefInput, UserUpdateWithoutRentalRefInput>, UserUncheckedUpdateWithoutRentalRefInput>
  }

  export type TypePremisesCreateNestedManyWithoutCharacteristicInput = {
    create?: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput> | TypePremisesCreateWithoutCharacteristicInput[] | TypePremisesUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: TypePremisesCreateOrConnectWithoutCharacteristicInput | TypePremisesCreateOrConnectWithoutCharacteristicInput[]
    connect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
  }

  export type DescriptionCharacteristicCreateNestedManyWithoutCharacteristicInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput> | DescriptionCharacteristicCreateWithoutCharacteristicInput[] | DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput | DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput[]
    createMany?: DescriptionCharacteristicCreateManyCharacteristicInputEnvelope
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
  }

  export type TypePremisesUncheckedCreateNestedManyWithoutCharacteristicInput = {
    create?: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput> | TypePremisesCreateWithoutCharacteristicInput[] | TypePremisesUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: TypePremisesCreateOrConnectWithoutCharacteristicInput | TypePremisesCreateOrConnectWithoutCharacteristicInput[]
    connect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
  }

  export type DescriptionCharacteristicUncheckedCreateNestedManyWithoutCharacteristicInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput> | DescriptionCharacteristicCreateWithoutCharacteristicInput[] | DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput | DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput[]
    createMany?: DescriptionCharacteristicCreateManyCharacteristicInputEnvelope
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
  }

  export type TypePremisesUpdateManyWithoutCharacteristicNestedInput = {
    create?: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput> | TypePremisesCreateWithoutCharacteristicInput[] | TypePremisesUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: TypePremisesCreateOrConnectWithoutCharacteristicInput | TypePremisesCreateOrConnectWithoutCharacteristicInput[]
    upsert?: TypePremisesUpsertWithWhereUniqueWithoutCharacteristicInput | TypePremisesUpsertWithWhereUniqueWithoutCharacteristicInput[]
    set?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    disconnect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    delete?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    connect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    update?: TypePremisesUpdateWithWhereUniqueWithoutCharacteristicInput | TypePremisesUpdateWithWhereUniqueWithoutCharacteristicInput[]
    updateMany?: TypePremisesUpdateManyWithWhereWithoutCharacteristicInput | TypePremisesUpdateManyWithWhereWithoutCharacteristicInput[]
    deleteMany?: TypePremisesScalarWhereInput | TypePremisesScalarWhereInput[]
  }

  export type DescriptionCharacteristicUpdateManyWithoutCharacteristicNestedInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput> | DescriptionCharacteristicCreateWithoutCharacteristicInput[] | DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput | DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput[]
    upsert?: DescriptionCharacteristicUpsertWithWhereUniqueWithoutCharacteristicInput | DescriptionCharacteristicUpsertWithWhereUniqueWithoutCharacteristicInput[]
    createMany?: DescriptionCharacteristicCreateManyCharacteristicInputEnvelope
    set?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    disconnect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    delete?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    update?: DescriptionCharacteristicUpdateWithWhereUniqueWithoutCharacteristicInput | DescriptionCharacteristicUpdateWithWhereUniqueWithoutCharacteristicInput[]
    updateMany?: DescriptionCharacteristicUpdateManyWithWhereWithoutCharacteristicInput | DescriptionCharacteristicUpdateManyWithWhereWithoutCharacteristicInput[]
    deleteMany?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
  }

  export type TypePremisesUncheckedUpdateManyWithoutCharacteristicNestedInput = {
    create?: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput> | TypePremisesCreateWithoutCharacteristicInput[] | TypePremisesUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: TypePremisesCreateOrConnectWithoutCharacteristicInput | TypePremisesCreateOrConnectWithoutCharacteristicInput[]
    upsert?: TypePremisesUpsertWithWhereUniqueWithoutCharacteristicInput | TypePremisesUpsertWithWhereUniqueWithoutCharacteristicInput[]
    set?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    disconnect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    delete?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    connect?: TypePremisesWhereUniqueInput | TypePremisesWhereUniqueInput[]
    update?: TypePremisesUpdateWithWhereUniqueWithoutCharacteristicInput | TypePremisesUpdateWithWhereUniqueWithoutCharacteristicInput[]
    updateMany?: TypePremisesUpdateManyWithWhereWithoutCharacteristicInput | TypePremisesUpdateManyWithWhereWithoutCharacteristicInput[]
    deleteMany?: TypePremisesScalarWhereInput | TypePremisesScalarWhereInput[]
  }

  export type DescriptionCharacteristicUncheckedUpdateManyWithoutCharacteristicNestedInput = {
    create?: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput> | DescriptionCharacteristicCreateWithoutCharacteristicInput[] | DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput[]
    connectOrCreate?: DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput | DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput[]
    upsert?: DescriptionCharacteristicUpsertWithWhereUniqueWithoutCharacteristicInput | DescriptionCharacteristicUpsertWithWhereUniqueWithoutCharacteristicInput[]
    createMany?: DescriptionCharacteristicCreateManyCharacteristicInputEnvelope
    set?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    disconnect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    delete?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    connect?: DescriptionCharacteristicWhereUniqueInput | DescriptionCharacteristicWhereUniqueInput[]
    update?: DescriptionCharacteristicUpdateWithWhereUniqueWithoutCharacteristicInput | DescriptionCharacteristicUpdateWithWhereUniqueWithoutCharacteristicInput[]
    updateMany?: DescriptionCharacteristicUpdateManyWithWhereWithoutCharacteristicInput | DescriptionCharacteristicUpdateManyWithWhereWithoutCharacteristicInput[]
    deleteMany?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
  }

  export type CharacteristicCreateNestedOneWithoutDescriptionCharacteristicRefInput = {
    create?: XOR<CharacteristicCreateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    connectOrCreate?: CharacteristicCreateOrConnectWithoutDescriptionCharacteristicRefInput
    connect?: CharacteristicWhereUniqueInput
  }

  export type PremiseCreateNestedOneWithoutDescriptionCharacteristicRefInput = {
    create?: XOR<PremiseCreateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    connectOrCreate?: PremiseCreateOrConnectWithoutDescriptionCharacteristicRefInput
    connect?: PremiseWhereUniqueInput
  }

  export type CharacteristicUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput = {
    create?: XOR<CharacteristicCreateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    connectOrCreate?: CharacteristicCreateOrConnectWithoutDescriptionCharacteristicRefInput
    upsert?: CharacteristicUpsertWithoutDescriptionCharacteristicRefInput
    connect?: CharacteristicWhereUniqueInput
    update?: XOR<XOR<CharacteristicUpdateToOneWithWhereWithoutDescriptionCharacteristicRefInput, CharacteristicUpdateWithoutDescriptionCharacteristicRefInput>, CharacteristicUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
  }

  export type PremiseUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput = {
    create?: XOR<PremiseCreateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    connectOrCreate?: PremiseCreateOrConnectWithoutDescriptionCharacteristicRefInput
    upsert?: PremiseUpsertWithoutDescriptionCharacteristicRefInput
    connect?: PremiseWhereUniqueInput
    update?: XOR<XOR<PremiseUpdateToOneWithWhereWithoutDescriptionCharacteristicRefInput, PremiseUpdateWithoutDescriptionCharacteristicRefInput>, PremiseUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Buffer | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel> | null
    in?: Buffer[] | null
    notIn?: Buffer[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Buffer | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PremiseCreateWithoutOwnerInput = {
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalCreateNestedManyWithoutPremiseInput
    TypePremises: TypePremisesCreateNestedOneWithoutPremiseRefInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutPremiseInput
  }

  export type PremiseUncheckedCreateWithoutOwnerInput = {
    ID?: number
    ID_type: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalUncheckedCreateNestedManyWithoutPremiseInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutPremiseInput
  }

  export type PremiseCreateOrConnectWithoutOwnerInput = {
    where: PremiseWhereUniqueInput
    create: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput>
  }

  export type PremiseCreateManyOwnerInputEnvelope = {
    data: PremiseCreateManyOwnerInput | PremiseCreateManyOwnerInput[]
  }

  export type RentalCreateWithoutTenantInput = {
    Status?: number
    StartDate?: Date | string | null
    Premise: PremiseCreateNestedOneWithoutRentalRefInput
  }

  export type RentalUncheckedCreateWithoutTenantInput = {
    ID?: number
    ID_premise: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type RentalCreateOrConnectWithoutTenantInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput>
  }

  export type RentalCreateManyTenantInputEnvelope = {
    data: RentalCreateManyTenantInput | RentalCreateManyTenantInput[]
  }

  export type PremiseUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PremiseWhereUniqueInput
    update: XOR<PremiseUpdateWithoutOwnerInput, PremiseUncheckedUpdateWithoutOwnerInput>
    create: XOR<PremiseCreateWithoutOwnerInput, PremiseUncheckedCreateWithoutOwnerInput>
  }

  export type PremiseUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PremiseWhereUniqueInput
    data: XOR<PremiseUpdateWithoutOwnerInput, PremiseUncheckedUpdateWithoutOwnerInput>
  }

  export type PremiseUpdateManyWithWhereWithoutOwnerInput = {
    where: PremiseScalarWhereInput
    data: XOR<PremiseUpdateManyMutationInput, PremiseUncheckedUpdateManyWithoutOwnerInput>
  }

  export type PremiseScalarWhereInput = {
    AND?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
    OR?: PremiseScalarWhereInput[]
    NOT?: PremiseScalarWhereInput | PremiseScalarWhereInput[]
    ID?: IntFilter<"Premise"> | number
    ID_type?: IntFilter<"Premise"> | number
    ID_owner?: IntFilter<"Premise"> | number
    Name?: StringFilter<"Premise"> | string
    Image?: BytesNullableFilter<"Premise"> | Buffer | null
    Price?: FloatFilter<"Premise"> | number
    Address?: StringFilter<"Premise"> | string
  }

  export type RentalUpsertWithWhereUniqueWithoutTenantInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutTenantInput, RentalUncheckedUpdateWithoutTenantInput>
    create: XOR<RentalCreateWithoutTenantInput, RentalUncheckedCreateWithoutTenantInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutTenantInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutTenantInput, RentalUncheckedUpdateWithoutTenantInput>
  }

  export type RentalUpdateManyWithWhereWithoutTenantInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutTenantInput>
  }

  export type RentalScalarWhereInput = {
    AND?: RentalScalarWhereInput | RentalScalarWhereInput[]
    OR?: RentalScalarWhereInput[]
    NOT?: RentalScalarWhereInput | RentalScalarWhereInput[]
    ID?: IntFilter<"Rental"> | number
    ID_premise?: IntFilter<"Rental"> | number
    ID_tenant?: IntFilter<"Rental"> | number
    Status?: IntFilter<"Rental"> | number
    StartDate?: DateTimeNullableFilter<"Rental"> | Date | string | null
  }

  export type PremiseCreateWithoutTypePremisesInput = {
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalCreateNestedManyWithoutPremiseInput
    Owner: UserCreateNestedOneWithoutPremiseRefInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutPremiseInput
  }

  export type PremiseUncheckedCreateWithoutTypePremisesInput = {
    ID?: number
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalUncheckedCreateNestedManyWithoutPremiseInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutPremiseInput
  }

  export type PremiseCreateOrConnectWithoutTypePremisesInput = {
    where: PremiseWhereUniqueInput
    create: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput>
  }

  export type PremiseCreateManyTypePremisesInputEnvelope = {
    data: PremiseCreateManyTypePremisesInput | PremiseCreateManyTypePremisesInput[]
  }

  export type CharacteristicCreateWithoutTypePremisesInput = {
    Name: string
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicUncheckedCreateWithoutTypePremisesInput = {
    ID?: number
    Name: string
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicCreateOrConnectWithoutTypePremisesInput = {
    where: CharacteristicWhereUniqueInput
    create: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput>
  }

  export type PremiseUpsertWithWhereUniqueWithoutTypePremisesInput = {
    where: PremiseWhereUniqueInput
    update: XOR<PremiseUpdateWithoutTypePremisesInput, PremiseUncheckedUpdateWithoutTypePremisesInput>
    create: XOR<PremiseCreateWithoutTypePremisesInput, PremiseUncheckedCreateWithoutTypePremisesInput>
  }

  export type PremiseUpdateWithWhereUniqueWithoutTypePremisesInput = {
    where: PremiseWhereUniqueInput
    data: XOR<PremiseUpdateWithoutTypePremisesInput, PremiseUncheckedUpdateWithoutTypePremisesInput>
  }

  export type PremiseUpdateManyWithWhereWithoutTypePremisesInput = {
    where: PremiseScalarWhereInput
    data: XOR<PremiseUpdateManyMutationInput, PremiseUncheckedUpdateManyWithoutTypePremisesInput>
  }

  export type CharacteristicUpsertWithWhereUniqueWithoutTypePremisesInput = {
    where: CharacteristicWhereUniqueInput
    update: XOR<CharacteristicUpdateWithoutTypePremisesInput, CharacteristicUncheckedUpdateWithoutTypePremisesInput>
    create: XOR<CharacteristicCreateWithoutTypePremisesInput, CharacteristicUncheckedCreateWithoutTypePremisesInput>
  }

  export type CharacteristicUpdateWithWhereUniqueWithoutTypePremisesInput = {
    where: CharacteristicWhereUniqueInput
    data: XOR<CharacteristicUpdateWithoutTypePremisesInput, CharacteristicUncheckedUpdateWithoutTypePremisesInput>
  }

  export type CharacteristicUpdateManyWithWhereWithoutTypePremisesInput = {
    where: CharacteristicScalarWhereInput
    data: XOR<CharacteristicUpdateManyMutationInput, CharacteristicUncheckedUpdateManyWithoutTypePremisesInput>
  }

  export type CharacteristicScalarWhereInput = {
    AND?: CharacteristicScalarWhereInput | CharacteristicScalarWhereInput[]
    OR?: CharacteristicScalarWhereInput[]
    NOT?: CharacteristicScalarWhereInput | CharacteristicScalarWhereInput[]
    ID?: IntFilter<"Characteristic"> | number
    Name?: StringFilter<"Characteristic"> | string
  }

  export type RentalCreateWithoutPremiseInput = {
    Status?: number
    StartDate?: Date | string | null
    Tenant: UserCreateNestedOneWithoutRentalRefInput
  }

  export type RentalUncheckedCreateWithoutPremiseInput = {
    ID?: number
    ID_tenant: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type RentalCreateOrConnectWithoutPremiseInput = {
    where: RentalWhereUniqueInput
    create: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput>
  }

  export type RentalCreateManyPremiseInputEnvelope = {
    data: RentalCreateManyPremiseInput | RentalCreateManyPremiseInput[]
  }

  export type TypePremisesCreateWithoutPremiseRefInput = {
    Name: string
    Characteristic?: CharacteristicCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesUncheckedCreateWithoutPremiseRefInput = {
    ID?: number
    Name: string
    Characteristic?: CharacteristicUncheckedCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesCreateOrConnectWithoutPremiseRefInput = {
    where: TypePremisesWhereUniqueInput
    create: XOR<TypePremisesCreateWithoutPremiseRefInput, TypePremisesUncheckedCreateWithoutPremiseRefInput>
  }

  export type UserCreateWithoutPremiseRefInput = {
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    RentalRef?: RentalCreateNestedManyWithoutTenantInput
  }

  export type UserUncheckedCreateWithoutPremiseRefInput = {
    ID?: number
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    RentalRef?: RentalUncheckedCreateNestedManyWithoutTenantInput
  }

  export type UserCreateOrConnectWithoutPremiseRefInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPremiseRefInput, UserUncheckedCreateWithoutPremiseRefInput>
  }

  export type DescriptionCharacteristicCreateWithoutPremiseInput = {
    Description: string
    Characteristic: CharacteristicCreateNestedOneWithoutDescriptionCharacteristicRefInput
  }

  export type DescriptionCharacteristicUncheckedCreateWithoutPremiseInput = {
    ID?: number
    ID_characteristic: number
    Description: string
  }

  export type DescriptionCharacteristicCreateOrConnectWithoutPremiseInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    create: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput>
  }

  export type DescriptionCharacteristicCreateManyPremiseInputEnvelope = {
    data: DescriptionCharacteristicCreateManyPremiseInput | DescriptionCharacteristicCreateManyPremiseInput[]
  }

  export type RentalUpsertWithWhereUniqueWithoutPremiseInput = {
    where: RentalWhereUniqueInput
    update: XOR<RentalUpdateWithoutPremiseInput, RentalUncheckedUpdateWithoutPremiseInput>
    create: XOR<RentalCreateWithoutPremiseInput, RentalUncheckedCreateWithoutPremiseInput>
  }

  export type RentalUpdateWithWhereUniqueWithoutPremiseInput = {
    where: RentalWhereUniqueInput
    data: XOR<RentalUpdateWithoutPremiseInput, RentalUncheckedUpdateWithoutPremiseInput>
  }

  export type RentalUpdateManyWithWhereWithoutPremiseInput = {
    where: RentalScalarWhereInput
    data: XOR<RentalUpdateManyMutationInput, RentalUncheckedUpdateManyWithoutPremiseInput>
  }

  export type TypePremisesUpsertWithoutPremiseRefInput = {
    update: XOR<TypePremisesUpdateWithoutPremiseRefInput, TypePremisesUncheckedUpdateWithoutPremiseRefInput>
    create: XOR<TypePremisesCreateWithoutPremiseRefInput, TypePremisesUncheckedCreateWithoutPremiseRefInput>
    where?: TypePremisesWhereInput
  }

  export type TypePremisesUpdateToOneWithWhereWithoutPremiseRefInput = {
    where?: TypePremisesWhereInput
    data: XOR<TypePremisesUpdateWithoutPremiseRefInput, TypePremisesUncheckedUpdateWithoutPremiseRefInput>
  }

  export type TypePremisesUpdateWithoutPremiseRefInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Characteristic?: CharacteristicUpdateManyWithoutTypePremisesNestedInput
  }

  export type TypePremisesUncheckedUpdateWithoutPremiseRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Characteristic?: CharacteristicUncheckedUpdateManyWithoutTypePremisesNestedInput
  }

  export type UserUpsertWithoutPremiseRefInput = {
    update: XOR<UserUpdateWithoutPremiseRefInput, UserUncheckedUpdateWithoutPremiseRefInput>
    create: XOR<UserCreateWithoutPremiseRefInput, UserUncheckedCreateWithoutPremiseRefInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPremiseRefInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPremiseRefInput, UserUncheckedUpdateWithoutPremiseRefInput>
  }

  export type UserUpdateWithoutPremiseRefInput = {
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    RentalRef?: RentalUpdateManyWithoutTenantNestedInput
  }

  export type UserUncheckedUpdateWithoutPremiseRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    RentalRef?: RentalUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type DescriptionCharacteristicUpsertWithWhereUniqueWithoutPremiseInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    update: XOR<DescriptionCharacteristicUpdateWithoutPremiseInput, DescriptionCharacteristicUncheckedUpdateWithoutPremiseInput>
    create: XOR<DescriptionCharacteristicCreateWithoutPremiseInput, DescriptionCharacteristicUncheckedCreateWithoutPremiseInput>
  }

  export type DescriptionCharacteristicUpdateWithWhereUniqueWithoutPremiseInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    data: XOR<DescriptionCharacteristicUpdateWithoutPremiseInput, DescriptionCharacteristicUncheckedUpdateWithoutPremiseInput>
  }

  export type DescriptionCharacteristicUpdateManyWithWhereWithoutPremiseInput = {
    where: DescriptionCharacteristicScalarWhereInput
    data: XOR<DescriptionCharacteristicUpdateManyMutationInput, DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseInput>
  }

  export type DescriptionCharacteristicScalarWhereInput = {
    AND?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
    OR?: DescriptionCharacteristicScalarWhereInput[]
    NOT?: DescriptionCharacteristicScalarWhereInput | DescriptionCharacteristicScalarWhereInput[]
    ID?: IntFilter<"DescriptionCharacteristic"> | number
    ID_characteristic?: IntFilter<"DescriptionCharacteristic"> | number
    ID_premise?: IntFilter<"DescriptionCharacteristic"> | number
    Description?: StringFilter<"DescriptionCharacteristic"> | string
  }

  export type PremiseCreateWithoutRentalRefInput = {
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    TypePremises: TypePremisesCreateNestedOneWithoutPremiseRefInput
    Owner: UserCreateNestedOneWithoutPremiseRefInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicCreateNestedManyWithoutPremiseInput
  }

  export type PremiseUncheckedCreateWithoutRentalRefInput = {
    ID?: number
    ID_type: number
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedCreateNestedManyWithoutPremiseInput
  }

  export type PremiseCreateOrConnectWithoutRentalRefInput = {
    where: PremiseWhereUniqueInput
    create: XOR<PremiseCreateWithoutRentalRefInput, PremiseUncheckedCreateWithoutRentalRefInput>
  }

  export type UserCreateWithoutRentalRefInput = {
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    PremiseRef?: PremiseCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutRentalRefInput = {
    ID?: number
    Login: string
    Password: string
    Role?: number
    Name?: string | null
    Surname?: string | null
    PhoneNumber?: string | null
    Photo?: Buffer | null
    PremiseRef?: PremiseUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutRentalRefInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRentalRefInput, UserUncheckedCreateWithoutRentalRefInput>
  }

  export type PremiseUpsertWithoutRentalRefInput = {
    update: XOR<PremiseUpdateWithoutRentalRefInput, PremiseUncheckedUpdateWithoutRentalRefInput>
    create: XOR<PremiseCreateWithoutRentalRefInput, PremiseUncheckedCreateWithoutRentalRefInput>
    where?: PremiseWhereInput
  }

  export type PremiseUpdateToOneWithWhereWithoutRentalRefInput = {
    where?: PremiseWhereInput
    data: XOR<PremiseUpdateWithoutRentalRefInput, PremiseUncheckedUpdateWithoutRentalRefInput>
  }

  export type PremiseUpdateWithoutRentalRefInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    TypePremises?: TypePremisesUpdateOneRequiredWithoutPremiseRefNestedInput
    Owner?: UserUpdateOneRequiredWithoutPremiseRefNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateWithoutRentalRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseNestedInput
  }

  export type UserUpsertWithoutRentalRefInput = {
    update: XOR<UserUpdateWithoutRentalRefInput, UserUncheckedUpdateWithoutRentalRefInput>
    create: XOR<UserCreateWithoutRentalRefInput, UserUncheckedCreateWithoutRentalRefInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRentalRefInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRentalRefInput, UserUncheckedUpdateWithoutRentalRefInput>
  }

  export type UserUpdateWithoutRentalRefInput = {
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    PremiseRef?: PremiseUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutRentalRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Login?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Role?: IntFieldUpdateOperationsInput | number
    Name?: NullableStringFieldUpdateOperationsInput | string | null
    Surname?: NullableStringFieldUpdateOperationsInput | string | null
    PhoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    Photo?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    PremiseRef?: PremiseUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TypePremisesCreateWithoutCharacteristicInput = {
    Name: string
    PremiseRef?: PremiseCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesUncheckedCreateWithoutCharacteristicInput = {
    ID?: number
    Name: string
    PremiseRef?: PremiseUncheckedCreateNestedManyWithoutTypePremisesInput
  }

  export type TypePremisesCreateOrConnectWithoutCharacteristicInput = {
    where: TypePremisesWhereUniqueInput
    create: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput>
  }

  export type DescriptionCharacteristicCreateWithoutCharacteristicInput = {
    Description: string
    Premise: PremiseCreateNestedOneWithoutDescriptionCharacteristicRefInput
  }

  export type DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput = {
    ID?: number
    ID_premise: number
    Description: string
  }

  export type DescriptionCharacteristicCreateOrConnectWithoutCharacteristicInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    create: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput>
  }

  export type DescriptionCharacteristicCreateManyCharacteristicInputEnvelope = {
    data: DescriptionCharacteristicCreateManyCharacteristicInput | DescriptionCharacteristicCreateManyCharacteristicInput[]
  }

  export type TypePremisesUpsertWithWhereUniqueWithoutCharacteristicInput = {
    where: TypePremisesWhereUniqueInput
    update: XOR<TypePremisesUpdateWithoutCharacteristicInput, TypePremisesUncheckedUpdateWithoutCharacteristicInput>
    create: XOR<TypePremisesCreateWithoutCharacteristicInput, TypePremisesUncheckedCreateWithoutCharacteristicInput>
  }

  export type TypePremisesUpdateWithWhereUniqueWithoutCharacteristicInput = {
    where: TypePremisesWhereUniqueInput
    data: XOR<TypePremisesUpdateWithoutCharacteristicInput, TypePremisesUncheckedUpdateWithoutCharacteristicInput>
  }

  export type TypePremisesUpdateManyWithWhereWithoutCharacteristicInput = {
    where: TypePremisesScalarWhereInput
    data: XOR<TypePremisesUpdateManyMutationInput, TypePremisesUncheckedUpdateManyWithoutCharacteristicInput>
  }

  export type TypePremisesScalarWhereInput = {
    AND?: TypePremisesScalarWhereInput | TypePremisesScalarWhereInput[]
    OR?: TypePremisesScalarWhereInput[]
    NOT?: TypePremisesScalarWhereInput | TypePremisesScalarWhereInput[]
    ID?: IntFilter<"TypePremises"> | number
    Name?: StringFilter<"TypePremises"> | string
  }

  export type DescriptionCharacteristicUpsertWithWhereUniqueWithoutCharacteristicInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    update: XOR<DescriptionCharacteristicUpdateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedUpdateWithoutCharacteristicInput>
    create: XOR<DescriptionCharacteristicCreateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedCreateWithoutCharacteristicInput>
  }

  export type DescriptionCharacteristicUpdateWithWhereUniqueWithoutCharacteristicInput = {
    where: DescriptionCharacteristicWhereUniqueInput
    data: XOR<DescriptionCharacteristicUpdateWithoutCharacteristicInput, DescriptionCharacteristicUncheckedUpdateWithoutCharacteristicInput>
  }

  export type DescriptionCharacteristicUpdateManyWithWhereWithoutCharacteristicInput = {
    where: DescriptionCharacteristicScalarWhereInput
    data: XOR<DescriptionCharacteristicUpdateManyMutationInput, DescriptionCharacteristicUncheckedUpdateManyWithoutCharacteristicInput>
  }

  export type CharacteristicCreateWithoutDescriptionCharacteristicRefInput = {
    Name: string
    TypePremises?: TypePremisesCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicUncheckedCreateWithoutDescriptionCharacteristicRefInput = {
    ID?: number
    Name: string
    TypePremises?: TypePremisesUncheckedCreateNestedManyWithoutCharacteristicInput
  }

  export type CharacteristicCreateOrConnectWithoutDescriptionCharacteristicRefInput = {
    where: CharacteristicWhereUniqueInput
    create: XOR<CharacteristicCreateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedCreateWithoutDescriptionCharacteristicRefInput>
  }

  export type PremiseCreateWithoutDescriptionCharacteristicRefInput = {
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalCreateNestedManyWithoutPremiseInput
    TypePremises: TypePremisesCreateNestedOneWithoutPremiseRefInput
    Owner: UserCreateNestedOneWithoutPremiseRefInput
  }

  export type PremiseUncheckedCreateWithoutDescriptionCharacteristicRefInput = {
    ID?: number
    ID_type: number
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
    RentalRef?: RentalUncheckedCreateNestedManyWithoutPremiseInput
  }

  export type PremiseCreateOrConnectWithoutDescriptionCharacteristicRefInput = {
    where: PremiseWhereUniqueInput
    create: XOR<PremiseCreateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedCreateWithoutDescriptionCharacteristicRefInput>
  }

  export type CharacteristicUpsertWithoutDescriptionCharacteristicRefInput = {
    update: XOR<CharacteristicUpdateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
    create: XOR<CharacteristicCreateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    where?: CharacteristicWhereInput
  }

  export type CharacteristicUpdateToOneWithWhereWithoutDescriptionCharacteristicRefInput = {
    where?: CharacteristicWhereInput
    data: XOR<CharacteristicUpdateWithoutDescriptionCharacteristicRefInput, CharacteristicUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
  }

  export type CharacteristicUpdateWithoutDescriptionCharacteristicRefInput = {
    Name?: StringFieldUpdateOperationsInput | string
    TypePremises?: TypePremisesUpdateManyWithoutCharacteristicNestedInput
  }

  export type CharacteristicUncheckedUpdateWithoutDescriptionCharacteristicRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    TypePremises?: TypePremisesUncheckedUpdateManyWithoutCharacteristicNestedInput
  }

  export type PremiseUpsertWithoutDescriptionCharacteristicRefInput = {
    update: XOR<PremiseUpdateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
    create: XOR<PremiseCreateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedCreateWithoutDescriptionCharacteristicRefInput>
    where?: PremiseWhereInput
  }

  export type PremiseUpdateToOneWithWhereWithoutDescriptionCharacteristicRefInput = {
    where?: PremiseWhereInput
    data: XOR<PremiseUpdateWithoutDescriptionCharacteristicRefInput, PremiseUncheckedUpdateWithoutDescriptionCharacteristicRefInput>
  }

  export type PremiseUpdateWithoutDescriptionCharacteristicRefInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUpdateManyWithoutPremiseNestedInput
    TypePremises?: TypePremisesUpdateOneRequiredWithoutPremiseRefNestedInput
    Owner?: UserUpdateOneRequiredWithoutPremiseRefNestedInput
  }

  export type PremiseUncheckedUpdateWithoutDescriptionCharacteristicRefInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUncheckedUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseCreateManyOwnerInput = {
    ID_type: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
  }

  export type RentalCreateManyTenantInput = {
    ID_premise: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type PremiseUpdateWithoutOwnerInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUpdateManyWithoutPremiseNestedInput
    TypePremises?: TypePremisesUpdateOneRequiredWithoutPremiseRefNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateWithoutOwnerInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUncheckedUpdateManyWithoutPremiseNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateManyWithoutOwnerInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_type?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type RentalUpdateWithoutTenantInput = {
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Premise?: PremiseUpdateOneRequiredWithoutRentalRefNestedInput
  }

  export type RentalUncheckedUpdateWithoutTenantInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentalUncheckedUpdateManyWithoutTenantInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiseCreateManyTypePremisesInput = {
    ID_owner: number
    Name: string
    Image?: Buffer | null
    Price: number
    Address: string
  }

  export type PremiseUpdateWithoutTypePremisesInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUpdateManyWithoutPremiseNestedInput
    Owner?: UserUpdateOneRequiredWithoutPremiseRefNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateWithoutTypePremisesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    RentalRef?: RentalUncheckedUpdateManyWithoutPremiseNestedInput
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseNestedInput
  }

  export type PremiseUncheckedUpdateManyWithoutTypePremisesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_owner?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Image?: NullableBytesFieldUpdateOperationsInput | Buffer | null
    Price?: FloatFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type CharacteristicUpdateWithoutTypePremisesInput = {
    Name?: StringFieldUpdateOperationsInput | string
    DescriptionCharacteristicRef?: DescriptionCharacteristicUpdateManyWithoutCharacteristicNestedInput
  }

  export type CharacteristicUncheckedUpdateWithoutTypePremisesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    DescriptionCharacteristicRef?: DescriptionCharacteristicUncheckedUpdateManyWithoutCharacteristicNestedInput
  }

  export type CharacteristicUncheckedUpdateManyWithoutTypePremisesInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type RentalCreateManyPremiseInput = {
    ID_tenant: number
    Status?: number
    StartDate?: Date | string | null
  }

  export type DescriptionCharacteristicCreateManyPremiseInput = {
    ID_characteristic: number
    Description: string
  }

  export type RentalUpdateWithoutPremiseInput = {
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Tenant?: UserUpdateOneRequiredWithoutRentalRefNestedInput
  }

  export type RentalUncheckedUpdateWithoutPremiseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_tenant?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RentalUncheckedUpdateManyWithoutPremiseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_tenant?: IntFieldUpdateOperationsInput | number
    Status?: IntFieldUpdateOperationsInput | number
    StartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DescriptionCharacteristicUpdateWithoutPremiseInput = {
    Description?: StringFieldUpdateOperationsInput | string
    Characteristic?: CharacteristicUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput
  }

  export type DescriptionCharacteristicUncheckedUpdateWithoutPremiseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_characteristic?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicUncheckedUpdateManyWithoutPremiseInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_characteristic?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicCreateManyCharacteristicInput = {
    ID_premise: number
    Description: string
  }

  export type TypePremisesUpdateWithoutCharacteristicInput = {
    Name?: StringFieldUpdateOperationsInput | string
    PremiseRef?: PremiseUpdateManyWithoutTypePremisesNestedInput
  }

  export type TypePremisesUncheckedUpdateWithoutCharacteristicInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    PremiseRef?: PremiseUncheckedUpdateManyWithoutTypePremisesNestedInput
  }

  export type TypePremisesUncheckedUpdateManyWithoutCharacteristicInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicUpdateWithoutCharacteristicInput = {
    Description?: StringFieldUpdateOperationsInput | string
    Premise?: PremiseUpdateOneRequiredWithoutDescriptionCharacteristicRefNestedInput
  }

  export type DescriptionCharacteristicUncheckedUpdateWithoutCharacteristicInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type DescriptionCharacteristicUncheckedUpdateManyWithoutCharacteristicInput = {
    ID?: IntFieldUpdateOperationsInput | number
    ID_premise?: IntFieldUpdateOperationsInput | number
    Description?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypePremisesCountOutputTypeDefaultArgs instead
     */
    export type TypePremisesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypePremisesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PremiseCountOutputTypeDefaultArgs instead
     */
    export type PremiseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PremiseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacteristicCountOutputTypeDefaultArgs instead
     */
    export type CharacteristicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacteristicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypePremisesDefaultArgs instead
     */
    export type TypePremisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypePremisesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PremiseDefaultArgs instead
     */
    export type PremiseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PremiseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RentalDefaultArgs instead
     */
    export type RentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RentalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacteristicDefaultArgs instead
     */
    export type CharacteristicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacteristicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DescriptionCharacteristicDefaultArgs instead
     */
    export type DescriptionCharacteristicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DescriptionCharacteristicDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}